
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027b4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080028c0  080028c0  000128c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002940  08002940  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08002940  08002940  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002940  08002940  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002940  08002940  00012940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002944  08002944  00012944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08002948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000094  080029dc  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  080029dc  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000078dc  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017ce  00000000  00000000  00027999  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006b8  00000000  00000000  00029168  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005f0  00000000  00000000  00029820  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001784c  00000000  00000000  00029e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000676d  00000000  00000000  0004165c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00082405  00000000  00000000  00047dc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ca1ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d00  00000000  00000000  000ca24c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000094 	.word	0x20000094
 8000128:	00000000 	.word	0x00000000
 800012c:	080028a8 	.word	0x080028a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000098 	.word	0x20000098
 8000148:	080028a8 	.word	0x080028a8

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <get_arg>:
#include "stm32f1xx_hal.h"

#define MAX_ARGS 20

static char *get_arg(const char *text, const int length)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	6039      	str	r1, [r7, #0]

	char *new_text = (char*)malloc(sizeof(char)*(length+1));
 800017a:	683b      	ldr	r3, [r7, #0]
 800017c:	3301      	adds	r3, #1
 800017e:	4618      	mov	r0, r3
 8000180:	f001 ff66 	bl	8002050 <malloc>
 8000184:	4603      	mov	r3, r0
 8000186:	60fb      	str	r3, [r7, #12]
	if(!*new_text) return NULL;
 8000188:	68fb      	ldr	r3, [r7, #12]
 800018a:	781b      	ldrb	r3, [r3, #0]
 800018c:	2b00      	cmp	r3, #0
 800018e:	d101      	bne.n	8000194 <get_arg+0x24>
 8000190:	2300      	movs	r3, #0
 8000192:	e00b      	b.n	80001ac <get_arg+0x3c>
	memcpy(new_text, text, length);
 8000194:	683b      	ldr	r3, [r7, #0]
 8000196:	461a      	mov	r2, r3
 8000198:	6879      	ldr	r1, [r7, #4]
 800019a:	68f8      	ldr	r0, [r7, #12]
 800019c:	f001 ff68 	bl	8002070 <memcpy>
	new_text[length] = 0;
 80001a0:	683b      	ldr	r3, [r7, #0]
 80001a2:	68fa      	ldr	r2, [r7, #12]
 80001a4:	4413      	add	r3, r2
 80001a6:	2200      	movs	r2, #0
 80001a8:	701a      	strb	r2, [r3, #0]
	return new_text;
 80001aa:	68fb      	ldr	r3, [r7, #12]
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	3710      	adds	r7, #16
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bd80      	pop	{r7, pc}

080001b4 <get_args>:


int get_args(char *text, char ***argv, int *argc)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b08c      	sub	sp, #48	; 0x30
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	60f8      	str	r0, [r7, #12]
 80001bc:	60b9      	str	r1, [r7, #8]
 80001be:	607a      	str	r2, [r7, #4]
	uint offset = 0;
 80001c0:	2300      	movs	r3, #0
 80001c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint first_pos = 0;
 80001c4:	2300      	movs	r3, #0
 80001c6:	62bb      	str	r3, [r7, #40]	; 0x28
	char *base_char;
	const int len = strlen(text);
 80001c8:	68f8      	ldr	r0, [r7, #12]
 80001ca:	f7ff ffc9 	bl	8000160 <strlen>
 80001ce:	4603      	mov	r3, r0
 80001d0:	617b      	str	r3, [r7, #20]

	char **new_argv = malloc(sizeof(char*)*MAX_ARGS);
 80001d2:	2050      	movs	r0, #80	; 0x50
 80001d4:	f001 ff3c 	bl	8002050 <malloc>
 80001d8:	4603      	mov	r3, r0
 80001da:	613b      	str	r3, [r7, #16]
	if(!*new_argv) return -1;
 80001dc:	693b      	ldr	r3, [r7, #16]
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d102      	bne.n	80001ea <get_args+0x36>
 80001e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80001e8:	e068      	b.n	80002bc <get_args+0x108>
	char **argv_iterator = new_argv;
 80001ea:	693b      	ldr	r3, [r7, #16]
 80001ec:	623b      	str	r3, [r7, #32]
	int cnt = 0;
 80001ee:	2300      	movs	r3, #0
 80001f0:	61fb      	str	r3, [r7, #28]

	for(int i = 0; i < len; i++) {
 80001f2:	2300      	movs	r3, #0
 80001f4:	61bb      	str	r3, [r7, #24]
 80001f6:	e03e      	b.n	8000276 <get_args+0xc2>
		/* Remove leading and double spaces */
		if(!first_pos && *text == ' ') {
 80001f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d107      	bne.n	800020e <get_args+0x5a>
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	781b      	ldrb	r3, [r3, #0]
 8000202:	2b20      	cmp	r3, #32
 8000204:	d103      	bne.n	800020e <get_args+0x5a>
			text++;
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	3301      	adds	r3, #1
 800020a:	60fb      	str	r3, [r7, #12]
			continue;
 800020c:	e030      	b.n	8000270 <get_args+0xbc>
		}

		/* position saved and the first char is not a space */
		if(!first_pos) {
 800020e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000210:	2b00      	cmp	r3, #0
 8000212:	d103      	bne.n	800021c <get_args+0x68>
			first_pos = 1;
 8000214:	2301      	movs	r3, #1
 8000216:	62bb      	str	r3, [r7, #40]	; 0x28
			/* Set new tmp_char which is the base address */
			base_char = text;
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	627b      	str	r3, [r7, #36]	; 0x24
		}

		/* Increment offset */
		offset++;
 800021c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800021e:	3301      	adds	r3, #1
 8000220:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* check if next char is a space. */
		if(base_char[offset] == ' ') {
 8000222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000226:	4413      	add	r3, r2
 8000228:	781b      	ldrb	r3, [r3, #0]
 800022a:	2b20      	cmp	r3, #32
 800022c:	d120      	bne.n	8000270 <get_args+0xbc>
			*argv_iterator = get_arg(base_char, offset);
 800022e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000230:	4619      	mov	r1, r3
 8000232:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000234:	f7ff ff9c 	bl	8000170 <get_arg>
 8000238:	4602      	mov	r2, r0
 800023a:	6a3b      	ldr	r3, [r7, #32]
 800023c:	601a      	str	r2, [r3, #0]
			if(!*argv_iterator) return -1;
 800023e:	6a3b      	ldr	r3, [r7, #32]
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	2b00      	cmp	r3, #0
 8000244:	d102      	bne.n	800024c <get_args+0x98>
 8000246:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800024a:	e037      	b.n	80002bc <get_args+0x108>
			++argv_iterator;
 800024c:	6a3b      	ldr	r3, [r7, #32]
 800024e:	3304      	adds	r3, #4
 8000250:	623b      	str	r3, [r7, #32]
			++cnt;
 8000252:	69fb      	ldr	r3, [r7, #28]
 8000254:	3301      	adds	r3, #1
 8000256:	61fb      	str	r3, [r7, #28]
			/* We know that we should jump one more to the right
			 * because we hit a space
			 * */
			text += offset + 1;
 8000258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800025a:	3301      	adds	r3, #1
 800025c:	68fa      	ldr	r2, [r7, #12]
 800025e:	4413      	add	r3, r2
 8000260:	60fb      	str	r3, [r7, #12]
			/* if we won't check next char, increment i as well */
			++i;
 8000262:	69bb      	ldr	r3, [r7, #24]
 8000264:	3301      	adds	r3, #1
 8000266:	61bb      	str	r3, [r7, #24]

			/* Reset counter */
			offset = 0;
 8000268:	2300      	movs	r3, #0
 800026a:	62fb      	str	r3, [r7, #44]	; 0x2c
			first_pos = 0;
 800026c:	2300      	movs	r3, #0
 800026e:	62bb      	str	r3, [r7, #40]	; 0x28
	for(int i = 0; i < len; i++) {
 8000270:	69bb      	ldr	r3, [r7, #24]
 8000272:	3301      	adds	r3, #1
 8000274:	61bb      	str	r3, [r7, #24]
 8000276:	69ba      	ldr	r2, [r7, #24]
 8000278:	697b      	ldr	r3, [r7, #20]
 800027a:	429a      	cmp	r2, r3
 800027c:	dbbc      	blt.n	80001f8 <get_args+0x44>
		}
	}

	if(first_pos) {
 800027e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000280:	2b00      	cmp	r3, #0
 8000282:	d014      	beq.n	80002ae <get_args+0xfa>
		*argv_iterator = get_arg(base_char, offset);
 8000284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000286:	4619      	mov	r1, r3
 8000288:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800028a:	f7ff ff71 	bl	8000170 <get_arg>
 800028e:	4602      	mov	r2, r0
 8000290:	6a3b      	ldr	r3, [r7, #32]
 8000292:	601a      	str	r2, [r3, #0]
		if(!*argv_iterator) return -1;
 8000294:	6a3b      	ldr	r3, [r7, #32]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d102      	bne.n	80002a2 <get_args+0xee>
 800029c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80002a0:	e00c      	b.n	80002bc <get_args+0x108>
		++argv_iterator;
 80002a2:	6a3b      	ldr	r3, [r7, #32]
 80002a4:	3304      	adds	r3, #4
 80002a6:	623b      	str	r3, [r7, #32]
		++cnt;
 80002a8:	69fb      	ldr	r3, [r7, #28]
 80002aa:	3301      	adds	r3, #1
 80002ac:	61fb      	str	r3, [r7, #28]
	}

	*argv = new_argv;
 80002ae:	68bb      	ldr	r3, [r7, #8]
 80002b0:	693a      	ldr	r2, [r7, #16]
 80002b2:	601a      	str	r2, [r3, #0]
	*argc = cnt;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	69fa      	ldr	r2, [r7, #28]
 80002b8:	601a      	str	r2, [r3, #0]
	return 0;
 80002ba:	2300      	movs	r3, #0
}
 80002bc:	4618      	mov	r0, r3
 80002be:	3730      	adds	r7, #48	; 0x30
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}

080002c4 <free_args>:

void free_args(char **argv, const int argc)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	6039      	str	r1, [r7, #0]
	char **argv_iterator = argv;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < argc ; ++i) {
 80002d2:	2300      	movs	r3, #0
 80002d4:	60bb      	str	r3, [r7, #8]
 80002d6:	e00a      	b.n	80002ee <free_args+0x2a>
		free(*argv_iterator);
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4618      	mov	r0, r3
 80002de:	f001 febf 	bl	8002060 <free>
		++argv_iterator;
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	3304      	adds	r3, #4
 80002e6:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < argc ; ++i) {
 80002e8:	68bb      	ldr	r3, [r7, #8]
 80002ea:	3301      	adds	r3, #1
 80002ec:	60bb      	str	r3, [r7, #8]
 80002ee:	68ba      	ldr	r2, [r7, #8]
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	429a      	cmp	r2, r3
 80002f4:	dbf0      	blt.n	80002d8 <free_args+0x14>
	}
	free(argv);
 80002f6:	6878      	ldr	r0, [r7, #4]
 80002f8:	f001 feb2 	bl	8002060 <free>
}
 80002fc:	bf00      	nop
 80002fe:	3710      	adds	r7, #16
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}

08000304 <output>:


void output(UART_HandleTypeDef *huart, const char *fmt, ...)
{
 8000304:	b40e      	push	{r1, r2, r3}
 8000306:	b580      	push	{r7, lr}
 8000308:	b0c7      	sub	sp, #284	; 0x11c
 800030a:	af00      	add	r7, sp, #0
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	6018      	str	r0, [r3, #0]
	char buffer[256];
	char *buf_ptr = buffer;
 8000310:	f107 0310 	add.w	r3, r7, #16
 8000314:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	memset(buffer, 0, 256);
 8000318:	f107 0310 	add.w	r3, r7, #16
 800031c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000320:	2100      	movs	r1, #0
 8000322:	4618      	mov	r0, r3
 8000324:	f001 feaf 	bl	8002086 <memset>

	strcpy(buffer, "DEBUG: ");
 8000328:	f107 0310 	add.w	r3, r7, #16
 800032c:	4a25      	ldr	r2, [pc, #148]	; (80003c4 <output+0xc0>)
 800032e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000332:	e883 0003 	stmia.w	r3, {r0, r1}
	buf_ptr += strlen(buffer);
 8000336:	f107 0310 	add.w	r3, r7, #16
 800033a:	4618      	mov	r0, r3
 800033c:	f7ff ff10 	bl	8000160 <strlen>
 8000340:	4602      	mov	r2, r0
 8000342:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000346:	4413      	add	r3, r2
 8000348:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	va_list args;
	va_start (args, fmt);
 800034c:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8000350:	f107 030c 	add.w	r3, r7, #12
 8000354:	601a      	str	r2, [r3, #0]
	vsprintf (buf_ptr,fmt, args);
 8000356:	f107 030c 	add.w	r3, r7, #12
 800035a:	681a      	ldr	r2, [r3, #0]
 800035c:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8000360:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8000364:	f001 ff64 	bl	8002230 <vsiprintf>

	int len = strlen(buffer);
 8000368:	f107 0310 	add.w	r3, r7, #16
 800036c:	4618      	mov	r0, r3
 800036e:	f7ff fef7 	bl	8000160 <strlen>
 8000372:	4603      	mov	r3, r0
 8000374:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	buffer[len] = '\r';
 8000378:	f107 0210 	add.w	r2, r7, #16
 800037c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000380:	4413      	add	r3, r2
 8000382:	220d      	movs	r2, #13
 8000384:	701a      	strb	r2, [r3, #0]
	buffer[len+1] = '\n';
 8000386:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800038a:	3301      	adds	r3, #1
 800038c:	f107 0210 	add.w	r2, r7, #16
 8000390:	210a      	movs	r1, #10
 8000392:	54d1      	strb	r1, [r2, r3]
	len += 2;
 8000394:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000398:	3302      	adds	r3, #2
 800039a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	HAL_UART_Transmit(huart, (uint8_t*)buffer, len, 500);
 800039e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80003a2:	b29a      	uxth	r2, r3
 80003a4:	f107 0110 	add.w	r1, r7, #16
 80003a8:	1d38      	adds	r0, r7, #4
 80003aa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80003ae:	6800      	ldr	r0, [r0, #0]
 80003b0:	f001 fa3b 	bl	800182a <HAL_UART_Transmit>
	va_end (args);
}
 80003b4:	bf00      	nop
 80003b6:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80003ba:	46bd      	mov	sp, r7
 80003bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80003c0:	b003      	add	sp, #12
 80003c2:	4770      	bx	lr
 80003c4:	080028c0 	.word	0x080028c0

080003c8 <help>:
	void (*func)(char **argv, int argc);
};



static void help(char **argv, int argc) {
 80003c8:	b5b0      	push	{r4, r5, r7, lr}
 80003ca:	b088      	sub	sp, #32
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
 80003d0:	6039      	str	r1, [r7, #0]
	char help_str[] = "You need help mate?!";
 80003d2:	4b0a      	ldr	r3, [pc, #40]	; (80003fc <help+0x34>)
 80003d4:	f107 0408 	add.w	r4, r7, #8
 80003d8:	461d      	mov	r5, r3
 80003da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003de:	e895 0003 	ldmia.w	r5, {r0, r1}
 80003e2:	6020      	str	r0, [r4, #0]
 80003e4:	3404      	adds	r4, #4
 80003e6:	7021      	strb	r1, [r4, #0]
	output(&huart2, help_str);
 80003e8:	f107 0308 	add.w	r3, r7, #8
 80003ec:	4619      	mov	r1, r3
 80003ee:	4804      	ldr	r0, [pc, #16]	; (8000400 <help+0x38>)
 80003f0:	f7ff ff88 	bl	8000304 <output>
}
 80003f4:	bf00      	nop
 80003f6:	3720      	adds	r7, #32
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bdb0      	pop	{r4, r5, r7, pc}
 80003fc:	080028c8 	.word	0x080028c8
 8000400:	200001c8 	.word	0x200001c8

08000404 <run>:

static void run(char **argv, int argc) {
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	6039      	str	r1, [r7, #0]

}
 800040e:	bf00      	nop
 8000410:	370c      	adds	r7, #12
 8000412:	46bd      	mov	sp, r7
 8000414:	bc80      	pop	{r7}
 8000416:	4770      	bx	lr

08000418 <check_text>:
	{.input = "help", .func = help },
	{.input = "run",  .func = run  }
};
int help_sz = sizeof(helper) / sizeof(helper[0]);

static void check_text() {
 8000418:	b580      	push	{r7, lr}
 800041a:	b086      	sub	sp, #24
 800041c:	af00      	add	r7, sp, #0
	char **argv;
	int argc;
	int ret;
	ret = get_args((char *)buffer, &argv, &argc);
 800041e:	1d3a      	adds	r2, r7, #4
 8000420:	f107 0308 	add.w	r3, r7, #8
 8000424:	4619      	mov	r1, r3
 8000426:	481d      	ldr	r0, [pc, #116]	; (800049c <check_text+0x84>)
 8000428:	f7ff fec4 	bl	80001b4 <get_args>
 800042c:	60f8      	str	r0, [r7, #12]
	if(ret || argc < 1) goto end;
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d127      	bne.n	8000484 <check_text+0x6c>
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	2b00      	cmp	r3, #0
 8000438:	dd24      	ble.n	8000484 <check_text+0x6c>

	struct help_text *help_text = helper;
 800043a:	4b19      	ldr	r3, [pc, #100]	; (80004a0 <check_text+0x88>)
 800043c:	617b      	str	r3, [r7, #20]
	for(int i = 0 ; i < help_sz ; ++i) {
 800043e:	2300      	movs	r3, #0
 8000440:	613b      	str	r3, [r7, #16]
 8000442:	e016      	b.n	8000472 <check_text+0x5a>
		if(0 == strcmp(argv[0], help_text->input)) {
 8000444:	68bb      	ldr	r3, [r7, #8]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	697a      	ldr	r2, [r7, #20]
 800044a:	4611      	mov	r1, r2
 800044c:	4618      	mov	r0, r3
 800044e:	f7ff fe7d 	bl	800014c <strcmp>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d106      	bne.n	8000466 <check_text+0x4e>
			help_text->func(argv, argc);
 8000458:	697b      	ldr	r3, [r7, #20]
 800045a:	68db      	ldr	r3, [r3, #12]
 800045c:	68ba      	ldr	r2, [r7, #8]
 800045e:	6879      	ldr	r1, [r7, #4]
 8000460:	4610      	mov	r0, r2
 8000462:	4798      	blx	r3
			break;
 8000464:	e00a      	b.n	800047c <check_text+0x64>
		}
		++help_text;
 8000466:	697b      	ldr	r3, [r7, #20]
 8000468:	3310      	adds	r3, #16
 800046a:	617b      	str	r3, [r7, #20]
	for(int i = 0 ; i < help_sz ; ++i) {
 800046c:	693b      	ldr	r3, [r7, #16]
 800046e:	3301      	adds	r3, #1
 8000470:	613b      	str	r3, [r7, #16]
 8000472:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <check_text+0x8c>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	693a      	ldr	r2, [r7, #16]
 8000478:	429a      	cmp	r2, r3
 800047a:	dbe3      	blt.n	8000444 <check_text+0x2c>
	}
	buf_pos = 0;
 800047c:	4b0a      	ldr	r3, [pc, #40]	; (80004a8 <check_text+0x90>)
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	e000      	b.n	8000486 <check_text+0x6e>
end:
 8000484:	bf00      	nop
	free_args(argv, argc);
 8000486:	68bb      	ldr	r3, [r7, #8]
 8000488:	687a      	ldr	r2, [r7, #4]
 800048a:	4611      	mov	r1, r2
 800048c:	4618      	mov	r0, r3
 800048e:	f7ff ff19 	bl	80002c4 <free_args>
}
 8000492:	bf00      	nop
 8000494:	3718      	adds	r7, #24
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	200000b4 	.word	0x200000b4
 80004a0:	20000000 	.word	0x20000000
 80004a4:	20000020 	.word	0x20000020
 80004a8:	200001c4 	.word	0x200001c4

080004ac <main>:
  * @retval int
  */


int main(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b0:	f000 fa12 	bl	80008d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b4:	f000 f84c 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b8:	f000 f8ba 	bl	8000630 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004bc:	f000 f88e 	bl	80005dc <MX_USART2_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  recv = 0;
 80004c0:	4b1e      	ldr	r3, [pc, #120]	; (800053c <main+0x90>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
  buf_pos = 0;
 80004c6:	4b1e      	ldr	r3, [pc, #120]	; (8000540 <main+0x94>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]

  //HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
  HAL_UART_Receive_IT(&huart2, recv_buf, 1);
 80004cc:	2201      	movs	r2, #1
 80004ce:	491d      	ldr	r1, [pc, #116]	; (8000544 <main+0x98>)
 80004d0:	481d      	ldr	r0, [pc, #116]	; (8000548 <main+0x9c>)
 80004d2:	f001 fa3c 	bl	800194e <HAL_UART_Receive_IT>

  while (1)
  {
//	  HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
	  if(recv) {
 80004d6:	4b19      	ldr	r3, [pc, #100]	; (800053c <main+0x90>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d0fb      	beq.n	80004d6 <main+0x2a>
		  recv = 0;
 80004de:	4b17      	ldr	r3, [pc, #92]	; (800053c <main+0x90>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
		  if(recv_buf[0] == '\r' || buf_pos >= BUFFER_SZ) {
 80004e4:	4b17      	ldr	r3, [pc, #92]	; (8000544 <main+0x98>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b0d      	cmp	r3, #13
 80004ea:	d003      	beq.n	80004f4 <main+0x48>
 80004ec:	4b14      	ldr	r3, [pc, #80]	; (8000540 <main+0x94>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	2bfe      	cmp	r3, #254	; 0xfe
 80004f2:	dd11      	ble.n	8000518 <main+0x6c>
			  recv_buf[1] = '\n';
 80004f4:	4b13      	ldr	r3, [pc, #76]	; (8000544 <main+0x98>)
 80004f6:	220a      	movs	r2, #10
 80004f8:	705a      	strb	r2, [r3, #1]
			  HAL_UART_Transmit(&huart2, recv_buf, 2, 500);
 80004fa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80004fe:	2202      	movs	r2, #2
 8000500:	4910      	ldr	r1, [pc, #64]	; (8000544 <main+0x98>)
 8000502:	4811      	ldr	r0, [pc, #68]	; (8000548 <main+0x9c>)
 8000504:	f001 f991 	bl	800182a <HAL_UART_Transmit>

			  buffer[buf_pos] = 0;
 8000508:	4b0d      	ldr	r3, [pc, #52]	; (8000540 <main+0x94>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a0f      	ldr	r2, [pc, #60]	; (800054c <main+0xa0>)
 800050e:	2100      	movs	r1, #0
 8000510:	54d1      	strb	r1, [r2, r3]

			  check_text();
 8000512:	f7ff ff81 	bl	8000418 <check_text>
			  continue;
 8000516:	e00f      	b.n	8000538 <main+0x8c>
		  }

		  buffer[buf_pos++] = recv_buf[0];
 8000518:	4b09      	ldr	r3, [pc, #36]	; (8000540 <main+0x94>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	1c5a      	adds	r2, r3, #1
 800051e:	4908      	ldr	r1, [pc, #32]	; (8000540 <main+0x94>)
 8000520:	600a      	str	r2, [r1, #0]
 8000522:	4a08      	ldr	r2, [pc, #32]	; (8000544 <main+0x98>)
 8000524:	7811      	ldrb	r1, [r2, #0]
 8000526:	4a09      	ldr	r2, [pc, #36]	; (800054c <main+0xa0>)
 8000528:	54d1      	strb	r1, [r2, r3]
		  HAL_UART_Transmit(&huart2, recv_buf, 1, 500);
 800052a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800052e:	2201      	movs	r2, #1
 8000530:	4904      	ldr	r1, [pc, #16]	; (8000544 <main+0x98>)
 8000532:	4805      	ldr	r0, [pc, #20]	; (8000548 <main+0x9c>)
 8000534:	f001 f979 	bl	800182a <HAL_UART_Transmit>
	  if(recv) {
 8000538:	e7cd      	b.n	80004d6 <main+0x2a>
 800053a:	bf00      	nop
 800053c:	200000b0 	.word	0x200000b0
 8000540:	200001c4 	.word	0x200001c4
 8000544:	200001c0 	.word	0x200001c0
 8000548:	200001c8 	.word	0x200001c8
 800054c:	200000b4 	.word	0x200000b4

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b090      	sub	sp, #64	; 0x40
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 0318 	add.w	r3, r7, #24
 800055a:	2228      	movs	r2, #40	; 0x28
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f001 fd91 	bl	8002086 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
 800056e:	60da      	str	r2, [r3, #12]
 8000570:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000572:	2301      	movs	r3, #1
 8000574:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000576:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800057a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800057c:	2300      	movs	r3, #0
 800057e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000580:	2301      	movs	r3, #1
 8000582:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000584:	2302      	movs	r3, #2
 8000586:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000588:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800058c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800058e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000592:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000594:	f107 0318 	add.w	r3, r7, #24
 8000598:	4618      	mov	r0, r3
 800059a:	f000 fcdd 	bl	8000f58 <HAL_RCC_OscConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005a4:	f000 f87c 	bl	80006a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a8:	230f      	movs	r3, #15
 80005aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ac:	2302      	movs	r3, #2
 80005ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	2102      	movs	r1, #2
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 ff48 	bl	8001458 <HAL_RCC_ClockConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005ce:	f000 f867 	bl	80006a0 <Error_Handler>
  }
}
 80005d2:	bf00      	nop
 80005d4:	3740      	adds	r7, #64	; 0x40
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005e0:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_USART2_UART_Init+0x4c>)
 80005e2:	4a12      	ldr	r2, [pc, #72]	; (800062c <MX_USART2_UART_Init+0x50>)
 80005e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005e6:	4b10      	ldr	r3, [pc, #64]	; (8000628 <MX_USART2_UART_Init+0x4c>)
 80005e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <MX_USART2_UART_Init+0x4c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_USART2_UART_Init+0x4c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <MX_USART2_UART_Init+0x4c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_USART2_UART_Init+0x4c>)
 8000602:	220c      	movs	r2, #12
 8000604:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000606:	4b08      	ldr	r3, [pc, #32]	; (8000628 <MX_USART2_UART_Init+0x4c>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_USART2_UART_Init+0x4c>)
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000612:	4805      	ldr	r0, [pc, #20]	; (8000628 <MX_USART2_UART_Init+0x4c>)
 8000614:	f001 f8bc 	bl	8001790 <HAL_UART_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800061e:	f000 f83f 	bl	80006a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	200001c8 	.word	0x200001c8
 800062c:	40004400 	.word	0x40004400

08000630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_GPIO_Init+0x40>)
 8000638:	699b      	ldr	r3, [r3, #24]
 800063a:	4a0d      	ldr	r2, [pc, #52]	; (8000670 <MX_GPIO_Init+0x40>)
 800063c:	f043 0320 	orr.w	r3, r3, #32
 8000640:	6193      	str	r3, [r2, #24]
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <MX_GPIO_Init+0x40>)
 8000644:	699b      	ldr	r3, [r3, #24]
 8000646:	f003 0320 	and.w	r3, r3, #32
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <MX_GPIO_Init+0x40>)
 8000650:	699b      	ldr	r3, [r3, #24]
 8000652:	4a07      	ldr	r2, [pc, #28]	; (8000670 <MX_GPIO_Init+0x40>)
 8000654:	f043 0304 	orr.w	r3, r3, #4
 8000658:	6193      	str	r3, [r2, #24]
 800065a:	4b05      	ldr	r3, [pc, #20]	; (8000670 <MX_GPIO_Init+0x40>)
 800065c:	699b      	ldr	r3, [r3, #24]
 800065e:	f003 0304 	and.w	r3, r3, #4
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	683b      	ldr	r3, [r7, #0]

}
 8000666:	bf00      	nop
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	bc80      	pop	{r7}
 800066e:	4770      	bx	lr
 8000670:	40021000 	.word	0x40021000

08000674 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	recv = 1;
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <HAL_UART_RxCpltCallback+0x20>)
 800067e:	2201      	movs	r2, #1
 8000680:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, recv_buf, 1);
 8000682:	2201      	movs	r2, #1
 8000684:	4904      	ldr	r1, [pc, #16]	; (8000698 <HAL_UART_RxCpltCallback+0x24>)
 8000686:	4805      	ldr	r0, [pc, #20]	; (800069c <HAL_UART_RxCpltCallback+0x28>)
 8000688:	f001 f961 	bl	800194e <HAL_UART_Receive_IT>

}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	200000b0 	.word	0x200000b0
 8000698:	200001c0 	.word	0x200001c0
 800069c:	200001c8 	.word	0x200001c8

080006a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a6:	e7fe      	b.n	80006a6 <Error_Handler+0x6>

080006a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006ae:	4b15      	ldr	r3, [pc, #84]	; (8000704 <HAL_MspInit+0x5c>)
 80006b0:	699b      	ldr	r3, [r3, #24]
 80006b2:	4a14      	ldr	r2, [pc, #80]	; (8000704 <HAL_MspInit+0x5c>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	6193      	str	r3, [r2, #24]
 80006ba:	4b12      	ldr	r3, [pc, #72]	; (8000704 <HAL_MspInit+0x5c>)
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <HAL_MspInit+0x5c>)
 80006c8:	69db      	ldr	r3, [r3, #28]
 80006ca:	4a0e      	ldr	r2, [pc, #56]	; (8000704 <HAL_MspInit+0x5c>)
 80006cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d0:	61d3      	str	r3, [r2, #28]
 80006d2:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <HAL_MspInit+0x5c>)
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006de:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <HAL_MspInit+0x60>)
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	4a04      	ldr	r2, [pc, #16]	; (8000708 <HAL_MspInit+0x60>)
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fa:	bf00      	nop
 80006fc:	3714      	adds	r7, #20
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr
 8000704:	40021000 	.word	0x40021000
 8000708:	40010000 	.word	0x40010000

0800070c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000714:	f107 0310 	add.w	r3, r7, #16
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <HAL_UART_MspInit+0x98>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d137      	bne.n	800079c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800072c:	4b1e      	ldr	r3, [pc, #120]	; (80007a8 <HAL_UART_MspInit+0x9c>)
 800072e:	69db      	ldr	r3, [r3, #28]
 8000730:	4a1d      	ldr	r2, [pc, #116]	; (80007a8 <HAL_UART_MspInit+0x9c>)
 8000732:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000736:	61d3      	str	r3, [r2, #28]
 8000738:	4b1b      	ldr	r3, [pc, #108]	; (80007a8 <HAL_UART_MspInit+0x9c>)
 800073a:	69db      	ldr	r3, [r3, #28]
 800073c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000744:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <HAL_UART_MspInit+0x9c>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	4a17      	ldr	r2, [pc, #92]	; (80007a8 <HAL_UART_MspInit+0x9c>)
 800074a:	f043 0304 	orr.w	r3, r3, #4
 800074e:	6193      	str	r3, [r2, #24]
 8000750:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <HAL_UART_MspInit+0x9c>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f003 0304 	and.w	r3, r3, #4
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800075c:	2304      	movs	r3, #4
 800075e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000760:	2302      	movs	r3, #2
 8000762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000764:	2303      	movs	r3, #3
 8000766:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000768:	f107 0310 	add.w	r3, r7, #16
 800076c:	4619      	mov	r1, r3
 800076e:	480f      	ldr	r0, [pc, #60]	; (80007ac <HAL_UART_MspInit+0xa0>)
 8000770:	f000 fa98 	bl	8000ca4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000774:	2308      	movs	r3, #8
 8000776:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000780:	f107 0310 	add.w	r3, r7, #16
 8000784:	4619      	mov	r1, r3
 8000786:	4809      	ldr	r0, [pc, #36]	; (80007ac <HAL_UART_MspInit+0xa0>)
 8000788:	f000 fa8c 	bl	8000ca4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800078c:	2200      	movs	r2, #0
 800078e:	2100      	movs	r1, #0
 8000790:	2026      	movs	r0, #38	; 0x26
 8000792:	f000 f9da 	bl	8000b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000796:	2026      	movs	r0, #38	; 0x26
 8000798:	f000 f9f3 	bl	8000b82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800079c:	bf00      	nop
 800079e:	3720      	adds	r7, #32
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40004400 	.word	0x40004400
 80007a8:	40021000 	.word	0x40021000
 80007ac:	40010800 	.word	0x40010800

080007b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <NMI_Handler+0x4>

080007b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ba:	e7fe      	b.n	80007ba <HardFault_Handler+0x4>

080007bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <MemManage_Handler+0x4>

080007c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007c6:	e7fe      	b.n	80007c6 <BusFault_Handler+0x4>

080007c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007cc:	e7fe      	b.n	80007cc <UsageFault_Handler+0x4>

080007ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr

080007da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr

080007e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr

080007f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f6:	f000 f8b5 	bl	8000964 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000804:	4802      	ldr	r0, [pc, #8]	; (8000810 <USART2_IRQHandler+0x10>)
 8000806:	f001 f8f7 	bl	80019f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	200001c8 	.word	0x200001c8

08000814 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800081c:	4a14      	ldr	r2, [pc, #80]	; (8000870 <_sbrk+0x5c>)
 800081e:	4b15      	ldr	r3, [pc, #84]	; (8000874 <_sbrk+0x60>)
 8000820:	1ad3      	subs	r3, r2, r3
 8000822:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000828:	4b13      	ldr	r3, [pc, #76]	; (8000878 <_sbrk+0x64>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d102      	bne.n	8000836 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <_sbrk+0x64>)
 8000832:	4a12      	ldr	r2, [pc, #72]	; (800087c <_sbrk+0x68>)
 8000834:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <_sbrk+0x64>)
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4413      	add	r3, r2
 800083e:	693a      	ldr	r2, [r7, #16]
 8000840:	429a      	cmp	r2, r3
 8000842:	d207      	bcs.n	8000854 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000844:	f001 fbda 	bl	8001ffc <__errno>
 8000848:	4602      	mov	r2, r0
 800084a:	230c      	movs	r3, #12
 800084c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800084e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000852:	e009      	b.n	8000868 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000854:	4b08      	ldr	r3, [pc, #32]	; (8000878 <_sbrk+0x64>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800085a:	4b07      	ldr	r3, [pc, #28]	; (8000878 <_sbrk+0x64>)
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4413      	add	r3, r2
 8000862:	4a05      	ldr	r2, [pc, #20]	; (8000878 <_sbrk+0x64>)
 8000864:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000866:	68fb      	ldr	r3, [r7, #12]
}
 8000868:	4618      	mov	r0, r3
 800086a:	3718      	adds	r7, #24
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20005000 	.word	0x20005000
 8000874:	00000400 	.word	0x00000400
 8000878:	200001b4 	.word	0x200001b4
 800087c:	20000210 	.word	0x20000210

08000880 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr

0800088c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800088c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800088e:	e003      	b.n	8000898 <LoopCopyDataInit>

08000890 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000890:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000892:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000894:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000896:	3104      	adds	r1, #4

08000898 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000898:	480a      	ldr	r0, [pc, #40]	; (80008c4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800089c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800089e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80008a0:	d3f6      	bcc.n	8000890 <CopyDataInit>
  ldr r2, =_sbss
 80008a2:	4a0a      	ldr	r2, [pc, #40]	; (80008cc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80008a4:	e002      	b.n	80008ac <LoopFillZerobss>

080008a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80008a6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80008a8:	f842 3b04 	str.w	r3, [r2], #4

080008ac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80008ae:	429a      	cmp	r2, r3
  bcc FillZerobss
 80008b0:	d3f9      	bcc.n	80008a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008b2:	f7ff ffe5 	bl	8000880 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008b6:	f001 fba7 	bl	8002008 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ba:	f7ff fdf7 	bl	80004ac <main>
  bx lr
 80008be:	4770      	bx	lr
  ldr r3, =_sidata
 80008c0:	08002948 	.word	0x08002948
  ldr r0, =_sdata
 80008c4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80008c8:	20000094 	.word	0x20000094
  ldr r2, =_sbss
 80008cc:	20000094 	.word	0x20000094
  ldr r3, = _ebss
 80008d0:	20000210 	.word	0x20000210

080008d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008d4:	e7fe      	b.n	80008d4 <ADC1_2_IRQHandler>
	...

080008d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008dc:	4b08      	ldr	r3, [pc, #32]	; (8000900 <HAL_Init+0x28>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a07      	ldr	r2, [pc, #28]	; (8000900 <HAL_Init+0x28>)
 80008e2:	f043 0310 	orr.w	r3, r3, #16
 80008e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008e8:	2003      	movs	r0, #3
 80008ea:	f000 f923 	bl	8000b34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ee:	2000      	movs	r0, #0
 80008f0:	f000 f808 	bl	8000904 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008f4:	f7ff fed8 	bl	80006a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008f8:	2300      	movs	r3, #0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40022000 	.word	0x40022000

08000904 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800090c:	4b12      	ldr	r3, [pc, #72]	; (8000958 <HAL_InitTick+0x54>)
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	4b12      	ldr	r3, [pc, #72]	; (800095c <HAL_InitTick+0x58>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	4619      	mov	r1, r3
 8000916:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800091a:	fbb3 f3f1 	udiv	r3, r3, r1
 800091e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000922:	4618      	mov	r0, r3
 8000924:	f000 f93b 	bl	8000b9e <HAL_SYSTICK_Config>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800092e:	2301      	movs	r3, #1
 8000930:	e00e      	b.n	8000950 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2b0f      	cmp	r3, #15
 8000936:	d80a      	bhi.n	800094e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000938:	2200      	movs	r2, #0
 800093a:	6879      	ldr	r1, [r7, #4]
 800093c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000940:	f000 f903 	bl	8000b4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000944:	4a06      	ldr	r2, [pc, #24]	; (8000960 <HAL_InitTick+0x5c>)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800094a:	2300      	movs	r3, #0
 800094c:	e000      	b.n	8000950 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800094e:	2301      	movs	r3, #1
}
 8000950:	4618      	mov	r0, r3
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000024 	.word	0x20000024
 800095c:	2000002c 	.word	0x2000002c
 8000960:	20000028 	.word	0x20000028

08000964 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000968:	4b05      	ldr	r3, [pc, #20]	; (8000980 <HAL_IncTick+0x1c>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	461a      	mov	r2, r3
 800096e:	4b05      	ldr	r3, [pc, #20]	; (8000984 <HAL_IncTick+0x20>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4413      	add	r3, r2
 8000974:	4a03      	ldr	r2, [pc, #12]	; (8000984 <HAL_IncTick+0x20>)
 8000976:	6013      	str	r3, [r2, #0]
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr
 8000980:	2000002c 	.word	0x2000002c
 8000984:	20000208 	.word	0x20000208

08000988 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  return uwTick;
 800098c:	4b02      	ldr	r3, [pc, #8]	; (8000998 <HAL_GetTick+0x10>)
 800098e:	681b      	ldr	r3, [r3, #0]
}
 8000990:	4618      	mov	r0, r3
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr
 8000998:	20000208 	.word	0x20000208

0800099c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	f003 0307 	and.w	r3, r3, #7
 80009aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <__NVIC_SetPriorityGrouping+0x44>)
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009b2:	68ba      	ldr	r2, [r7, #8]
 80009b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009b8:	4013      	ands	r3, r2
 80009ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ce:	4a04      	ldr	r2, [pc, #16]	; (80009e0 <__NVIC_SetPriorityGrouping+0x44>)
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	60d3      	str	r3, [r2, #12]
}
 80009d4:	bf00      	nop
 80009d6:	3714      	adds	r7, #20
 80009d8:	46bd      	mov	sp, r7
 80009da:	bc80      	pop	{r7}
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e8:	4b04      	ldr	r3, [pc, #16]	; (80009fc <__NVIC_GetPriorityGrouping+0x18>)
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	0a1b      	lsrs	r3, r3, #8
 80009ee:	f003 0307 	and.w	r3, r3, #7
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	db0b      	blt.n	8000a2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	f003 021f 	and.w	r2, r3, #31
 8000a18:	4906      	ldr	r1, [pc, #24]	; (8000a34 <__NVIC_EnableIRQ+0x34>)
 8000a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1e:	095b      	lsrs	r3, r3, #5
 8000a20:	2001      	movs	r0, #1
 8000a22:	fa00 f202 	lsl.w	r2, r0, r2
 8000a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr
 8000a34:	e000e100 	.word	0xe000e100

08000a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	6039      	str	r1, [r7, #0]
 8000a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	db0a      	blt.n	8000a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	490c      	ldr	r1, [pc, #48]	; (8000a84 <__NVIC_SetPriority+0x4c>)
 8000a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a56:	0112      	lsls	r2, r2, #4
 8000a58:	b2d2      	uxtb	r2, r2
 8000a5a:	440b      	add	r3, r1
 8000a5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a60:	e00a      	b.n	8000a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4908      	ldr	r1, [pc, #32]	; (8000a88 <__NVIC_SetPriority+0x50>)
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	f003 030f 	and.w	r3, r3, #15
 8000a6e:	3b04      	subs	r3, #4
 8000a70:	0112      	lsls	r2, r2, #4
 8000a72:	b2d2      	uxtb	r2, r2
 8000a74:	440b      	add	r3, r1
 8000a76:	761a      	strb	r2, [r3, #24]
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000e100 	.word	0xe000e100
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b089      	sub	sp, #36	; 0x24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	f003 0307 	and.w	r3, r3, #7
 8000a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	f1c3 0307 	rsb	r3, r3, #7
 8000aa6:	2b04      	cmp	r3, #4
 8000aa8:	bf28      	it	cs
 8000aaa:	2304      	movcs	r3, #4
 8000aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	3304      	adds	r3, #4
 8000ab2:	2b06      	cmp	r3, #6
 8000ab4:	d902      	bls.n	8000abc <NVIC_EncodePriority+0x30>
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	3b03      	subs	r3, #3
 8000aba:	e000      	b.n	8000abe <NVIC_EncodePriority+0x32>
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	43da      	mvns	r2, r3
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	401a      	ands	r2, r3
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	fa01 f303 	lsl.w	r3, r1, r3
 8000ade:	43d9      	mvns	r1, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae4:	4313      	orrs	r3, r2
         );
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3724      	adds	r7, #36	; 0x24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr

08000af0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3b01      	subs	r3, #1
 8000afc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b00:	d301      	bcc.n	8000b06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b02:	2301      	movs	r3, #1
 8000b04:	e00f      	b.n	8000b26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b06:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <SysTick_Config+0x40>)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b0e:	210f      	movs	r1, #15
 8000b10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b14:	f7ff ff90 	bl	8000a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b18:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <SysTick_Config+0x40>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b1e:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <SysTick_Config+0x40>)
 8000b20:	2207      	movs	r2, #7
 8000b22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	e000e010 	.word	0xe000e010

08000b34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f7ff ff2d 	bl	800099c <__NVIC_SetPriorityGrouping>
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b086      	sub	sp, #24
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	4603      	mov	r3, r0
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	607a      	str	r2, [r7, #4]
 8000b56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b5c:	f7ff ff42 	bl	80009e4 <__NVIC_GetPriorityGrouping>
 8000b60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	68b9      	ldr	r1, [r7, #8]
 8000b66:	6978      	ldr	r0, [r7, #20]
 8000b68:	f7ff ff90 	bl	8000a8c <NVIC_EncodePriority>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b72:	4611      	mov	r1, r2
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff ff5f 	bl	8000a38 <__NVIC_SetPriority>
}
 8000b7a:	bf00      	nop
 8000b7c:	3718      	adds	r7, #24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b082      	sub	sp, #8
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	4603      	mov	r3, r0
 8000b8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff ff35 	bl	8000a00 <__NVIC_EnableIRQ>
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f7ff ffa2 	bl	8000af0 <SysTick_Config>
 8000bac:	4603      	mov	r3, r0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	d005      	beq.n	8000bda <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2204      	movs	r2, #4
 8000bd2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	73fb      	strb	r3, [r7, #15]
 8000bd8:	e051      	b.n	8000c7e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f022 020e 	bic.w	r2, r2, #14
 8000be8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f022 0201 	bic.w	r2, r2, #1
 8000bf8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a22      	ldr	r2, [pc, #136]	; (8000c88 <HAL_DMA_Abort_IT+0xd0>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d029      	beq.n	8000c58 <HAL_DMA_Abort_IT+0xa0>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a20      	ldr	r2, [pc, #128]	; (8000c8c <HAL_DMA_Abort_IT+0xd4>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d022      	beq.n	8000c54 <HAL_DMA_Abort_IT+0x9c>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a1f      	ldr	r2, [pc, #124]	; (8000c90 <HAL_DMA_Abort_IT+0xd8>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d01a      	beq.n	8000c4e <HAL_DMA_Abort_IT+0x96>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a1d      	ldr	r2, [pc, #116]	; (8000c94 <HAL_DMA_Abort_IT+0xdc>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d012      	beq.n	8000c48 <HAL_DMA_Abort_IT+0x90>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a1c      	ldr	r2, [pc, #112]	; (8000c98 <HAL_DMA_Abort_IT+0xe0>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d00a      	beq.n	8000c42 <HAL_DMA_Abort_IT+0x8a>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a1a      	ldr	r2, [pc, #104]	; (8000c9c <HAL_DMA_Abort_IT+0xe4>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d102      	bne.n	8000c3c <HAL_DMA_Abort_IT+0x84>
 8000c36:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c3a:	e00e      	b.n	8000c5a <HAL_DMA_Abort_IT+0xa2>
 8000c3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c40:	e00b      	b.n	8000c5a <HAL_DMA_Abort_IT+0xa2>
 8000c42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c46:	e008      	b.n	8000c5a <HAL_DMA_Abort_IT+0xa2>
 8000c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c4c:	e005      	b.n	8000c5a <HAL_DMA_Abort_IT+0xa2>
 8000c4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c52:	e002      	b.n	8000c5a <HAL_DMA_Abort_IT+0xa2>
 8000c54:	2310      	movs	r3, #16
 8000c56:	e000      	b.n	8000c5a <HAL_DMA_Abort_IT+0xa2>
 8000c58:	2301      	movs	r3, #1
 8000c5a:	4a11      	ldr	r2, [pc, #68]	; (8000ca0 <HAL_DMA_Abort_IT+0xe8>)
 8000c5c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2201      	movs	r2, #1
 8000c62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d003      	beq.n	8000c7e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	4798      	blx	r3
    } 
  }
  return status;
 8000c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3710      	adds	r7, #16
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40020008 	.word	0x40020008
 8000c8c:	4002001c 	.word	0x4002001c
 8000c90:	40020030 	.word	0x40020030
 8000c94:	40020044 	.word	0x40020044
 8000c98:	40020058 	.word	0x40020058
 8000c9c:	4002006c 	.word	0x4002006c
 8000ca0:	40020000 	.word	0x40020000

08000ca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b08b      	sub	sp, #44	; 0x2c
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cb6:	e127      	b.n	8000f08 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000cb8:	2201      	movs	r2, #1
 8000cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	69fa      	ldr	r2, [r7, #28]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f040 8116 	bne.w	8000f02 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	2b12      	cmp	r3, #18
 8000cdc:	d034      	beq.n	8000d48 <HAL_GPIO_Init+0xa4>
 8000cde:	2b12      	cmp	r3, #18
 8000ce0:	d80d      	bhi.n	8000cfe <HAL_GPIO_Init+0x5a>
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d02b      	beq.n	8000d3e <HAL_GPIO_Init+0x9a>
 8000ce6:	2b02      	cmp	r3, #2
 8000ce8:	d804      	bhi.n	8000cf4 <HAL_GPIO_Init+0x50>
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d031      	beq.n	8000d52 <HAL_GPIO_Init+0xae>
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d01c      	beq.n	8000d2c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cf2:	e048      	b.n	8000d86 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000cf4:	2b03      	cmp	r3, #3
 8000cf6:	d043      	beq.n	8000d80 <HAL_GPIO_Init+0xdc>
 8000cf8:	2b11      	cmp	r3, #17
 8000cfa:	d01b      	beq.n	8000d34 <HAL_GPIO_Init+0x90>
          break;
 8000cfc:	e043      	b.n	8000d86 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000cfe:	4a89      	ldr	r2, [pc, #548]	; (8000f24 <HAL_GPIO_Init+0x280>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d026      	beq.n	8000d52 <HAL_GPIO_Init+0xae>
 8000d04:	4a87      	ldr	r2, [pc, #540]	; (8000f24 <HAL_GPIO_Init+0x280>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d806      	bhi.n	8000d18 <HAL_GPIO_Init+0x74>
 8000d0a:	4a87      	ldr	r2, [pc, #540]	; (8000f28 <HAL_GPIO_Init+0x284>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d020      	beq.n	8000d52 <HAL_GPIO_Init+0xae>
 8000d10:	4a86      	ldr	r2, [pc, #536]	; (8000f2c <HAL_GPIO_Init+0x288>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d01d      	beq.n	8000d52 <HAL_GPIO_Init+0xae>
          break;
 8000d16:	e036      	b.n	8000d86 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d18:	4a85      	ldr	r2, [pc, #532]	; (8000f30 <HAL_GPIO_Init+0x28c>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d019      	beq.n	8000d52 <HAL_GPIO_Init+0xae>
 8000d1e:	4a85      	ldr	r2, [pc, #532]	; (8000f34 <HAL_GPIO_Init+0x290>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d016      	beq.n	8000d52 <HAL_GPIO_Init+0xae>
 8000d24:	4a84      	ldr	r2, [pc, #528]	; (8000f38 <HAL_GPIO_Init+0x294>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d013      	beq.n	8000d52 <HAL_GPIO_Init+0xae>
          break;
 8000d2a:	e02c      	b.n	8000d86 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	623b      	str	r3, [r7, #32]
          break;
 8000d32:	e028      	b.n	8000d86 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	3304      	adds	r3, #4
 8000d3a:	623b      	str	r3, [r7, #32]
          break;
 8000d3c:	e023      	b.n	8000d86 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	68db      	ldr	r3, [r3, #12]
 8000d42:	3308      	adds	r3, #8
 8000d44:	623b      	str	r3, [r7, #32]
          break;
 8000d46:	e01e      	b.n	8000d86 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	330c      	adds	r3, #12
 8000d4e:	623b      	str	r3, [r7, #32]
          break;
 8000d50:	e019      	b.n	8000d86 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d102      	bne.n	8000d60 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d5a:	2304      	movs	r3, #4
 8000d5c:	623b      	str	r3, [r7, #32]
          break;
 8000d5e:	e012      	b.n	8000d86 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d105      	bne.n	8000d74 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d68:	2308      	movs	r3, #8
 8000d6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	69fa      	ldr	r2, [r7, #28]
 8000d70:	611a      	str	r2, [r3, #16]
          break;
 8000d72:	e008      	b.n	8000d86 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d74:	2308      	movs	r3, #8
 8000d76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	69fa      	ldr	r2, [r7, #28]
 8000d7c:	615a      	str	r2, [r3, #20]
          break;
 8000d7e:	e002      	b.n	8000d86 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d80:	2300      	movs	r3, #0
 8000d82:	623b      	str	r3, [r7, #32]
          break;
 8000d84:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	2bff      	cmp	r3, #255	; 0xff
 8000d8a:	d801      	bhi.n	8000d90 <HAL_GPIO_Init+0xec>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	e001      	b.n	8000d94 <HAL_GPIO_Init+0xf0>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3304      	adds	r3, #4
 8000d94:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d96:	69bb      	ldr	r3, [r7, #24]
 8000d98:	2bff      	cmp	r3, #255	; 0xff
 8000d9a:	d802      	bhi.n	8000da2 <HAL_GPIO_Init+0xfe>
 8000d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	e002      	b.n	8000da8 <HAL_GPIO_Init+0x104>
 8000da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da4:	3b08      	subs	r3, #8
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	210f      	movs	r1, #15
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	fa01 f303 	lsl.w	r3, r1, r3
 8000db6:	43db      	mvns	r3, r3
 8000db8:	401a      	ands	r2, r3
 8000dba:	6a39      	ldr	r1, [r7, #32]
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc2:	431a      	orrs	r2, r3
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	f000 8096 	beq.w	8000f02 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000dd6:	4b59      	ldr	r3, [pc, #356]	; (8000f3c <HAL_GPIO_Init+0x298>)
 8000dd8:	699b      	ldr	r3, [r3, #24]
 8000dda:	4a58      	ldr	r2, [pc, #352]	; (8000f3c <HAL_GPIO_Init+0x298>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6193      	str	r3, [r2, #24]
 8000de2:	4b56      	ldr	r3, [pc, #344]	; (8000f3c <HAL_GPIO_Init+0x298>)
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000dee:	4a54      	ldr	r2, [pc, #336]	; (8000f40 <HAL_GPIO_Init+0x29c>)
 8000df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df2:	089b      	lsrs	r3, r3, #2
 8000df4:	3302      	adds	r3, #2
 8000df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dfa:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfe:	f003 0303 	and.w	r3, r3, #3
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	220f      	movs	r2, #15
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	68fa      	ldr	r2, [r7, #12]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a4b      	ldr	r2, [pc, #300]	; (8000f44 <HAL_GPIO_Init+0x2a0>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d013      	beq.n	8000e42 <HAL_GPIO_Init+0x19e>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a4a      	ldr	r2, [pc, #296]	; (8000f48 <HAL_GPIO_Init+0x2a4>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d00d      	beq.n	8000e3e <HAL_GPIO_Init+0x19a>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a49      	ldr	r2, [pc, #292]	; (8000f4c <HAL_GPIO_Init+0x2a8>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d007      	beq.n	8000e3a <HAL_GPIO_Init+0x196>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a48      	ldr	r2, [pc, #288]	; (8000f50 <HAL_GPIO_Init+0x2ac>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d101      	bne.n	8000e36 <HAL_GPIO_Init+0x192>
 8000e32:	2303      	movs	r3, #3
 8000e34:	e006      	b.n	8000e44 <HAL_GPIO_Init+0x1a0>
 8000e36:	2304      	movs	r3, #4
 8000e38:	e004      	b.n	8000e44 <HAL_GPIO_Init+0x1a0>
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	e002      	b.n	8000e44 <HAL_GPIO_Init+0x1a0>
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e000      	b.n	8000e44 <HAL_GPIO_Init+0x1a0>
 8000e42:	2300      	movs	r3, #0
 8000e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e46:	f002 0203 	and.w	r2, r2, #3
 8000e4a:	0092      	lsls	r2, r2, #2
 8000e4c:	4093      	lsls	r3, r2
 8000e4e:	68fa      	ldr	r2, [r7, #12]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e54:	493a      	ldr	r1, [pc, #232]	; (8000f40 <HAL_GPIO_Init+0x29c>)
 8000e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e58:	089b      	lsrs	r3, r3, #2
 8000e5a:	3302      	adds	r3, #2
 8000e5c:	68fa      	ldr	r2, [r7, #12]
 8000e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d006      	beq.n	8000e7c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e6e:	4b39      	ldr	r3, [pc, #228]	; (8000f54 <HAL_GPIO_Init+0x2b0>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	4938      	ldr	r1, [pc, #224]	; (8000f54 <HAL_GPIO_Init+0x2b0>)
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	600b      	str	r3, [r1, #0]
 8000e7a:	e006      	b.n	8000e8a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e7c:	4b35      	ldr	r3, [pc, #212]	; (8000f54 <HAL_GPIO_Init+0x2b0>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	43db      	mvns	r3, r3
 8000e84:	4933      	ldr	r1, [pc, #204]	; (8000f54 <HAL_GPIO_Init+0x2b0>)
 8000e86:	4013      	ands	r3, r2
 8000e88:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d006      	beq.n	8000ea4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e96:	4b2f      	ldr	r3, [pc, #188]	; (8000f54 <HAL_GPIO_Init+0x2b0>)
 8000e98:	685a      	ldr	r2, [r3, #4]
 8000e9a:	492e      	ldr	r1, [pc, #184]	; (8000f54 <HAL_GPIO_Init+0x2b0>)
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	604b      	str	r3, [r1, #4]
 8000ea2:	e006      	b.n	8000eb2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ea4:	4b2b      	ldr	r3, [pc, #172]	; (8000f54 <HAL_GPIO_Init+0x2b0>)
 8000ea6:	685a      	ldr	r2, [r3, #4]
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	4929      	ldr	r1, [pc, #164]	; (8000f54 <HAL_GPIO_Init+0x2b0>)
 8000eae:	4013      	ands	r3, r2
 8000eb0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d006      	beq.n	8000ecc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ebe:	4b25      	ldr	r3, [pc, #148]	; (8000f54 <HAL_GPIO_Init+0x2b0>)
 8000ec0:	689a      	ldr	r2, [r3, #8]
 8000ec2:	4924      	ldr	r1, [pc, #144]	; (8000f54 <HAL_GPIO_Init+0x2b0>)
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	608b      	str	r3, [r1, #8]
 8000eca:	e006      	b.n	8000eda <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ecc:	4b21      	ldr	r3, [pc, #132]	; (8000f54 <HAL_GPIO_Init+0x2b0>)
 8000ece:	689a      	ldr	r2, [r3, #8]
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	491f      	ldr	r1, [pc, #124]	; (8000f54 <HAL_GPIO_Init+0x2b0>)
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d006      	beq.n	8000ef4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ee6:	4b1b      	ldr	r3, [pc, #108]	; (8000f54 <HAL_GPIO_Init+0x2b0>)
 8000ee8:	68da      	ldr	r2, [r3, #12]
 8000eea:	491a      	ldr	r1, [pc, #104]	; (8000f54 <HAL_GPIO_Init+0x2b0>)
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	60cb      	str	r3, [r1, #12]
 8000ef2:	e006      	b.n	8000f02 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ef4:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <HAL_GPIO_Init+0x2b0>)
 8000ef6:	68da      	ldr	r2, [r3, #12]
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	43db      	mvns	r3, r3
 8000efc:	4915      	ldr	r1, [pc, #84]	; (8000f54 <HAL_GPIO_Init+0x2b0>)
 8000efe:	4013      	ands	r3, r2
 8000f00:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f04:	3301      	adds	r3, #1
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f47f aed0 	bne.w	8000cb8 <HAL_GPIO_Init+0x14>
  }
}
 8000f18:	bf00      	nop
 8000f1a:	372c      	adds	r7, #44	; 0x2c
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	10210000 	.word	0x10210000
 8000f28:	10110000 	.word	0x10110000
 8000f2c:	10120000 	.word	0x10120000
 8000f30:	10310000 	.word	0x10310000
 8000f34:	10320000 	.word	0x10320000
 8000f38:	10220000 	.word	0x10220000
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	40010000 	.word	0x40010000
 8000f44:	40010800 	.word	0x40010800
 8000f48:	40010c00 	.word	0x40010c00
 8000f4c:	40011000 	.word	0x40011000
 8000f50:	40011400 	.word	0x40011400
 8000f54:	40010400 	.word	0x40010400

08000f58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d101      	bne.n	8000f6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e26c      	b.n	8001444 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	f000 8087 	beq.w	8001086 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f78:	4b92      	ldr	r3, [pc, #584]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 030c 	and.w	r3, r3, #12
 8000f80:	2b04      	cmp	r3, #4
 8000f82:	d00c      	beq.n	8000f9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f84:	4b8f      	ldr	r3, [pc, #572]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 030c 	and.w	r3, r3, #12
 8000f8c:	2b08      	cmp	r3, #8
 8000f8e:	d112      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x5e>
 8000f90:	4b8c      	ldr	r3, [pc, #560]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f9c:	d10b      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f9e:	4b89      	ldr	r3, [pc, #548]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d06c      	beq.n	8001084 <HAL_RCC_OscConfig+0x12c>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d168      	bne.n	8001084 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e246      	b.n	8001444 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fbe:	d106      	bne.n	8000fce <HAL_RCC_OscConfig+0x76>
 8000fc0:	4b80      	ldr	r3, [pc, #512]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a7f      	ldr	r2, [pc, #508]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8000fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fca:	6013      	str	r3, [r2, #0]
 8000fcc:	e02e      	b.n	800102c <HAL_RCC_OscConfig+0xd4>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d10c      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x98>
 8000fd6:	4b7b      	ldr	r3, [pc, #492]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a7a      	ldr	r2, [pc, #488]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8000fdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fe0:	6013      	str	r3, [r2, #0]
 8000fe2:	4b78      	ldr	r3, [pc, #480]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a77      	ldr	r2, [pc, #476]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8000fe8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fec:	6013      	str	r3, [r2, #0]
 8000fee:	e01d      	b.n	800102c <HAL_RCC_OscConfig+0xd4>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ff8:	d10c      	bne.n	8001014 <HAL_RCC_OscConfig+0xbc>
 8000ffa:	4b72      	ldr	r3, [pc, #456]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a71      	ldr	r2, [pc, #452]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8001000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001004:	6013      	str	r3, [r2, #0]
 8001006:	4b6f      	ldr	r3, [pc, #444]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a6e      	ldr	r2, [pc, #440]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 800100c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001010:	6013      	str	r3, [r2, #0]
 8001012:	e00b      	b.n	800102c <HAL_RCC_OscConfig+0xd4>
 8001014:	4b6b      	ldr	r3, [pc, #428]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a6a      	ldr	r2, [pc, #424]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 800101a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800101e:	6013      	str	r3, [r2, #0]
 8001020:	4b68      	ldr	r3, [pc, #416]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a67      	ldr	r2, [pc, #412]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8001026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800102a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d013      	beq.n	800105c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001034:	f7ff fca8 	bl	8000988 <HAL_GetTick>
 8001038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800103a:	e008      	b.n	800104e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800103c:	f7ff fca4 	bl	8000988 <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	2b64      	cmp	r3, #100	; 0x64
 8001048:	d901      	bls.n	800104e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e1fa      	b.n	8001444 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800104e:	4b5d      	ldr	r3, [pc, #372]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d0f0      	beq.n	800103c <HAL_RCC_OscConfig+0xe4>
 800105a:	e014      	b.n	8001086 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800105c:	f7ff fc94 	bl	8000988 <HAL_GetTick>
 8001060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001062:	e008      	b.n	8001076 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001064:	f7ff fc90 	bl	8000988 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	2b64      	cmp	r3, #100	; 0x64
 8001070:	d901      	bls.n	8001076 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001072:	2303      	movs	r3, #3
 8001074:	e1e6      	b.n	8001444 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001076:	4b53      	ldr	r3, [pc, #332]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d1f0      	bne.n	8001064 <HAL_RCC_OscConfig+0x10c>
 8001082:	e000      	b.n	8001086 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	2b00      	cmp	r3, #0
 8001090:	d063      	beq.n	800115a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001092:	4b4c      	ldr	r3, [pc, #304]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f003 030c 	and.w	r3, r3, #12
 800109a:	2b00      	cmp	r3, #0
 800109c:	d00b      	beq.n	80010b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800109e:	4b49      	ldr	r3, [pc, #292]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f003 030c 	and.w	r3, r3, #12
 80010a6:	2b08      	cmp	r3, #8
 80010a8:	d11c      	bne.n	80010e4 <HAL_RCC_OscConfig+0x18c>
 80010aa:	4b46      	ldr	r3, [pc, #280]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d116      	bne.n	80010e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010b6:	4b43      	ldr	r3, [pc, #268]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d005      	beq.n	80010ce <HAL_RCC_OscConfig+0x176>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	691b      	ldr	r3, [r3, #16]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d001      	beq.n	80010ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e1ba      	b.n	8001444 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ce:	4b3d      	ldr	r3, [pc, #244]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	695b      	ldr	r3, [r3, #20]
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	4939      	ldr	r1, [pc, #228]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 80010de:	4313      	orrs	r3, r2
 80010e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010e2:	e03a      	b.n	800115a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	691b      	ldr	r3, [r3, #16]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d020      	beq.n	800112e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010ec:	4b36      	ldr	r3, [pc, #216]	; (80011c8 <HAL_RCC_OscConfig+0x270>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f2:	f7ff fc49 	bl	8000988 <HAL_GetTick>
 80010f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010f8:	e008      	b.n	800110c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010fa:	f7ff fc45 	bl	8000988 <HAL_GetTick>
 80010fe:	4602      	mov	r2, r0
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	2b02      	cmp	r3, #2
 8001106:	d901      	bls.n	800110c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001108:	2303      	movs	r3, #3
 800110a:	e19b      	b.n	8001444 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800110c:	4b2d      	ldr	r3, [pc, #180]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	2b00      	cmp	r3, #0
 8001116:	d0f0      	beq.n	80010fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001118:	4b2a      	ldr	r3, [pc, #168]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	4927      	ldr	r1, [pc, #156]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8001128:	4313      	orrs	r3, r2
 800112a:	600b      	str	r3, [r1, #0]
 800112c:	e015      	b.n	800115a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800112e:	4b26      	ldr	r3, [pc, #152]	; (80011c8 <HAL_RCC_OscConfig+0x270>)
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001134:	f7ff fc28 	bl	8000988 <HAL_GetTick>
 8001138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800113a:	e008      	b.n	800114e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800113c:	f7ff fc24 	bl	8000988 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b02      	cmp	r3, #2
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e17a      	b.n	8001444 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800114e:	4b1d      	ldr	r3, [pc, #116]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d1f0      	bne.n	800113c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0308 	and.w	r3, r3, #8
 8001162:	2b00      	cmp	r3, #0
 8001164:	d03a      	beq.n	80011dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	699b      	ldr	r3, [r3, #24]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d019      	beq.n	80011a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800116e:	4b17      	ldr	r3, [pc, #92]	; (80011cc <HAL_RCC_OscConfig+0x274>)
 8001170:	2201      	movs	r2, #1
 8001172:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001174:	f7ff fc08 	bl	8000988 <HAL_GetTick>
 8001178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800117a:	e008      	b.n	800118e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800117c:	f7ff fc04 	bl	8000988 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e15a      	b.n	8001444 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800118e:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8001190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d0f0      	beq.n	800117c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800119a:	2001      	movs	r0, #1
 800119c:	f000 fada 	bl	8001754 <RCC_Delay>
 80011a0:	e01c      	b.n	80011dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011a2:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <HAL_RCC_OscConfig+0x274>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a8:	f7ff fbee 	bl	8000988 <HAL_GetTick>
 80011ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011ae:	e00f      	b.n	80011d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011b0:	f7ff fbea 	bl	8000988 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d908      	bls.n	80011d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e140      	b.n	8001444 <HAL_RCC_OscConfig+0x4ec>
 80011c2:	bf00      	nop
 80011c4:	40021000 	.word	0x40021000
 80011c8:	42420000 	.word	0x42420000
 80011cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011d0:	4b9e      	ldr	r3, [pc, #632]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 80011d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1e9      	bne.n	80011b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f000 80a6 	beq.w	8001336 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011ea:	2300      	movs	r3, #0
 80011ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ee:	4b97      	ldr	r3, [pc, #604]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d10d      	bne.n	8001216 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011fa:	4b94      	ldr	r3, [pc, #592]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	4a93      	ldr	r2, [pc, #588]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 8001200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001204:	61d3      	str	r3, [r2, #28]
 8001206:	4b91      	ldr	r3, [pc, #580]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001212:	2301      	movs	r3, #1
 8001214:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001216:	4b8e      	ldr	r3, [pc, #568]	; (8001450 <HAL_RCC_OscConfig+0x4f8>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800121e:	2b00      	cmp	r3, #0
 8001220:	d118      	bne.n	8001254 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001222:	4b8b      	ldr	r3, [pc, #556]	; (8001450 <HAL_RCC_OscConfig+0x4f8>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a8a      	ldr	r2, [pc, #552]	; (8001450 <HAL_RCC_OscConfig+0x4f8>)
 8001228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800122c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800122e:	f7ff fbab 	bl	8000988 <HAL_GetTick>
 8001232:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001234:	e008      	b.n	8001248 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001236:	f7ff fba7 	bl	8000988 <HAL_GetTick>
 800123a:	4602      	mov	r2, r0
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	2b64      	cmp	r3, #100	; 0x64
 8001242:	d901      	bls.n	8001248 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e0fd      	b.n	8001444 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001248:	4b81      	ldr	r3, [pc, #516]	; (8001450 <HAL_RCC_OscConfig+0x4f8>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001250:	2b00      	cmp	r3, #0
 8001252:	d0f0      	beq.n	8001236 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d106      	bne.n	800126a <HAL_RCC_OscConfig+0x312>
 800125c:	4b7b      	ldr	r3, [pc, #492]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	4a7a      	ldr	r2, [pc, #488]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 8001262:	f043 0301 	orr.w	r3, r3, #1
 8001266:	6213      	str	r3, [r2, #32]
 8001268:	e02d      	b.n	80012c6 <HAL_RCC_OscConfig+0x36e>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d10c      	bne.n	800128c <HAL_RCC_OscConfig+0x334>
 8001272:	4b76      	ldr	r3, [pc, #472]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 8001274:	6a1b      	ldr	r3, [r3, #32]
 8001276:	4a75      	ldr	r2, [pc, #468]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 8001278:	f023 0301 	bic.w	r3, r3, #1
 800127c:	6213      	str	r3, [r2, #32]
 800127e:	4b73      	ldr	r3, [pc, #460]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 8001280:	6a1b      	ldr	r3, [r3, #32]
 8001282:	4a72      	ldr	r2, [pc, #456]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 8001284:	f023 0304 	bic.w	r3, r3, #4
 8001288:	6213      	str	r3, [r2, #32]
 800128a:	e01c      	b.n	80012c6 <HAL_RCC_OscConfig+0x36e>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	2b05      	cmp	r3, #5
 8001292:	d10c      	bne.n	80012ae <HAL_RCC_OscConfig+0x356>
 8001294:	4b6d      	ldr	r3, [pc, #436]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 8001296:	6a1b      	ldr	r3, [r3, #32]
 8001298:	4a6c      	ldr	r2, [pc, #432]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 800129a:	f043 0304 	orr.w	r3, r3, #4
 800129e:	6213      	str	r3, [r2, #32]
 80012a0:	4b6a      	ldr	r3, [pc, #424]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 80012a2:	6a1b      	ldr	r3, [r3, #32]
 80012a4:	4a69      	ldr	r2, [pc, #420]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 80012a6:	f043 0301 	orr.w	r3, r3, #1
 80012aa:	6213      	str	r3, [r2, #32]
 80012ac:	e00b      	b.n	80012c6 <HAL_RCC_OscConfig+0x36e>
 80012ae:	4b67      	ldr	r3, [pc, #412]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 80012b0:	6a1b      	ldr	r3, [r3, #32]
 80012b2:	4a66      	ldr	r2, [pc, #408]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 80012b4:	f023 0301 	bic.w	r3, r3, #1
 80012b8:	6213      	str	r3, [r2, #32]
 80012ba:	4b64      	ldr	r3, [pc, #400]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 80012bc:	6a1b      	ldr	r3, [r3, #32]
 80012be:	4a63      	ldr	r2, [pc, #396]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 80012c0:	f023 0304 	bic.w	r3, r3, #4
 80012c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d015      	beq.n	80012fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ce:	f7ff fb5b 	bl	8000988 <HAL_GetTick>
 80012d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012d4:	e00a      	b.n	80012ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012d6:	f7ff fb57 	bl	8000988 <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d901      	bls.n	80012ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e0ab      	b.n	8001444 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ec:	4b57      	ldr	r3, [pc, #348]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 80012ee:	6a1b      	ldr	r3, [r3, #32]
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d0ee      	beq.n	80012d6 <HAL_RCC_OscConfig+0x37e>
 80012f8:	e014      	b.n	8001324 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012fa:	f7ff fb45 	bl	8000988 <HAL_GetTick>
 80012fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001300:	e00a      	b.n	8001318 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001302:	f7ff fb41 	bl	8000988 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001310:	4293      	cmp	r3, r2
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e095      	b.n	8001444 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001318:	4b4c      	ldr	r3, [pc, #304]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 800131a:	6a1b      	ldr	r3, [r3, #32]
 800131c:	f003 0302 	and.w	r3, r3, #2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1ee      	bne.n	8001302 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001324:	7dfb      	ldrb	r3, [r7, #23]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d105      	bne.n	8001336 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800132a:	4b48      	ldr	r3, [pc, #288]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	4a47      	ldr	r2, [pc, #284]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 8001330:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001334:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	2b00      	cmp	r3, #0
 800133c:	f000 8081 	beq.w	8001442 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001340:	4b42      	ldr	r3, [pc, #264]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 030c 	and.w	r3, r3, #12
 8001348:	2b08      	cmp	r3, #8
 800134a:	d061      	beq.n	8001410 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	69db      	ldr	r3, [r3, #28]
 8001350:	2b02      	cmp	r3, #2
 8001352:	d146      	bne.n	80013e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001354:	4b3f      	ldr	r3, [pc, #252]	; (8001454 <HAL_RCC_OscConfig+0x4fc>)
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135a:	f7ff fb15 	bl	8000988 <HAL_GetTick>
 800135e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001360:	e008      	b.n	8001374 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001362:	f7ff fb11 	bl	8000988 <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e067      	b.n	8001444 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001374:	4b35      	ldr	r3, [pc, #212]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1f0      	bne.n	8001362 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a1b      	ldr	r3, [r3, #32]
 8001384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001388:	d108      	bne.n	800139c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800138a:	4b30      	ldr	r3, [pc, #192]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	492d      	ldr	r1, [pc, #180]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 8001398:	4313      	orrs	r3, r2
 800139a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800139c:	4b2b      	ldr	r3, [pc, #172]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a19      	ldr	r1, [r3, #32]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ac:	430b      	orrs	r3, r1
 80013ae:	4927      	ldr	r1, [pc, #156]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 80013b0:	4313      	orrs	r3, r2
 80013b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013b4:	4b27      	ldr	r3, [pc, #156]	; (8001454 <HAL_RCC_OscConfig+0x4fc>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ba:	f7ff fae5 	bl	8000988 <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013c0:	e008      	b.n	80013d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013c2:	f7ff fae1 	bl	8000988 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e037      	b.n	8001444 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013d4:	4b1d      	ldr	r3, [pc, #116]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d0f0      	beq.n	80013c2 <HAL_RCC_OscConfig+0x46a>
 80013e0:	e02f      	b.n	8001442 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013e2:	4b1c      	ldr	r3, [pc, #112]	; (8001454 <HAL_RCC_OscConfig+0x4fc>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e8:	f7ff face 	bl	8000988 <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013f0:	f7ff faca 	bl	8000988 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e020      	b.n	8001444 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001402:	4b12      	ldr	r3, [pc, #72]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f0      	bne.n	80013f0 <HAL_RCC_OscConfig+0x498>
 800140e:	e018      	b.n	8001442 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69db      	ldr	r3, [r3, #28]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d101      	bne.n	800141c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e013      	b.n	8001444 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800141c:	4b0b      	ldr	r3, [pc, #44]	; (800144c <HAL_RCC_OscConfig+0x4f4>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a1b      	ldr	r3, [r3, #32]
 800142c:	429a      	cmp	r2, r3
 800142e:	d106      	bne.n	800143e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800143a:	429a      	cmp	r2, r3
 800143c:	d001      	beq.n	8001442 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e000      	b.n	8001444 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	3718      	adds	r7, #24
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40021000 	.word	0x40021000
 8001450:	40007000 	.word	0x40007000
 8001454:	42420060 	.word	0x42420060

08001458 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d101      	bne.n	800146c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e0d0      	b.n	800160e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800146c:	4b6a      	ldr	r3, [pc, #424]	; (8001618 <HAL_RCC_ClockConfig+0x1c0>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0307 	and.w	r3, r3, #7
 8001474:	683a      	ldr	r2, [r7, #0]
 8001476:	429a      	cmp	r2, r3
 8001478:	d910      	bls.n	800149c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800147a:	4b67      	ldr	r3, [pc, #412]	; (8001618 <HAL_RCC_ClockConfig+0x1c0>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f023 0207 	bic.w	r2, r3, #7
 8001482:	4965      	ldr	r1, [pc, #404]	; (8001618 <HAL_RCC_ClockConfig+0x1c0>)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	4313      	orrs	r3, r2
 8001488:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800148a:	4b63      	ldr	r3, [pc, #396]	; (8001618 <HAL_RCC_ClockConfig+0x1c0>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	429a      	cmp	r2, r3
 8001496:	d001      	beq.n	800149c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e0b8      	b.n	800160e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d020      	beq.n	80014ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0304 	and.w	r3, r3, #4
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d005      	beq.n	80014c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014b4:	4b59      	ldr	r3, [pc, #356]	; (800161c <HAL_RCC_ClockConfig+0x1c4>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	4a58      	ldr	r2, [pc, #352]	; (800161c <HAL_RCC_ClockConfig+0x1c4>)
 80014ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80014be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0308 	and.w	r3, r3, #8
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d005      	beq.n	80014d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014cc:	4b53      	ldr	r3, [pc, #332]	; (800161c <HAL_RCC_ClockConfig+0x1c4>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	4a52      	ldr	r2, [pc, #328]	; (800161c <HAL_RCC_ClockConfig+0x1c4>)
 80014d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80014d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014d8:	4b50      	ldr	r3, [pc, #320]	; (800161c <HAL_RCC_ClockConfig+0x1c4>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	494d      	ldr	r1, [pc, #308]	; (800161c <HAL_RCC_ClockConfig+0x1c4>)
 80014e6:	4313      	orrs	r3, r2
 80014e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d040      	beq.n	8001578 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d107      	bne.n	800150e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014fe:	4b47      	ldr	r3, [pc, #284]	; (800161c <HAL_RCC_ClockConfig+0x1c4>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d115      	bne.n	8001536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e07f      	b.n	800160e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d107      	bne.n	8001526 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001516:	4b41      	ldr	r3, [pc, #260]	; (800161c <HAL_RCC_ClockConfig+0x1c4>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d109      	bne.n	8001536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e073      	b.n	800160e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001526:	4b3d      	ldr	r3, [pc, #244]	; (800161c <HAL_RCC_ClockConfig+0x1c4>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e06b      	b.n	800160e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001536:	4b39      	ldr	r3, [pc, #228]	; (800161c <HAL_RCC_ClockConfig+0x1c4>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f023 0203 	bic.w	r2, r3, #3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	4936      	ldr	r1, [pc, #216]	; (800161c <HAL_RCC_ClockConfig+0x1c4>)
 8001544:	4313      	orrs	r3, r2
 8001546:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001548:	f7ff fa1e 	bl	8000988 <HAL_GetTick>
 800154c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800154e:	e00a      	b.n	8001566 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001550:	f7ff fa1a 	bl	8000988 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	f241 3288 	movw	r2, #5000	; 0x1388
 800155e:	4293      	cmp	r3, r2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e053      	b.n	800160e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001566:	4b2d      	ldr	r3, [pc, #180]	; (800161c <HAL_RCC_ClockConfig+0x1c4>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f003 020c 	and.w	r2, r3, #12
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	429a      	cmp	r2, r3
 8001576:	d1eb      	bne.n	8001550 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001578:	4b27      	ldr	r3, [pc, #156]	; (8001618 <HAL_RCC_ClockConfig+0x1c0>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0307 	and.w	r3, r3, #7
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	429a      	cmp	r2, r3
 8001584:	d210      	bcs.n	80015a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001586:	4b24      	ldr	r3, [pc, #144]	; (8001618 <HAL_RCC_ClockConfig+0x1c0>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f023 0207 	bic.w	r2, r3, #7
 800158e:	4922      	ldr	r1, [pc, #136]	; (8001618 <HAL_RCC_ClockConfig+0x1c0>)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	4313      	orrs	r3, r2
 8001594:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001596:	4b20      	ldr	r3, [pc, #128]	; (8001618 <HAL_RCC_ClockConfig+0x1c0>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	683a      	ldr	r2, [r7, #0]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d001      	beq.n	80015a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e032      	b.n	800160e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0304 	and.w	r3, r3, #4
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d008      	beq.n	80015c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015b4:	4b19      	ldr	r3, [pc, #100]	; (800161c <HAL_RCC_ClockConfig+0x1c4>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	4916      	ldr	r1, [pc, #88]	; (800161c <HAL_RCC_ClockConfig+0x1c4>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0308 	and.w	r3, r3, #8
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d009      	beq.n	80015e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015d2:	4b12      	ldr	r3, [pc, #72]	; (800161c <HAL_RCC_ClockConfig+0x1c4>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	490e      	ldr	r1, [pc, #56]	; (800161c <HAL_RCC_ClockConfig+0x1c4>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015e6:	f000 f821 	bl	800162c <HAL_RCC_GetSysClockFreq>
 80015ea:	4601      	mov	r1, r0
 80015ec:	4b0b      	ldr	r3, [pc, #44]	; (800161c <HAL_RCC_ClockConfig+0x1c4>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	091b      	lsrs	r3, r3, #4
 80015f2:	f003 030f 	and.w	r3, r3, #15
 80015f6:	4a0a      	ldr	r2, [pc, #40]	; (8001620 <HAL_RCC_ClockConfig+0x1c8>)
 80015f8:	5cd3      	ldrb	r3, [r2, r3]
 80015fa:	fa21 f303 	lsr.w	r3, r1, r3
 80015fe:	4a09      	ldr	r2, [pc, #36]	; (8001624 <HAL_RCC_ClockConfig+0x1cc>)
 8001600:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <HAL_RCC_ClockConfig+0x1d0>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff f97c 	bl	8000904 <HAL_InitTick>

  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40022000 	.word	0x40022000
 800161c:	40021000 	.word	0x40021000
 8001620:	080028f4 	.word	0x080028f4
 8001624:	20000024 	.word	0x20000024
 8001628:	20000028 	.word	0x20000028

0800162c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800162c:	b490      	push	{r4, r7}
 800162e:	b08a      	sub	sp, #40	; 0x28
 8001630:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001632:	4b2a      	ldr	r3, [pc, #168]	; (80016dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001634:	1d3c      	adds	r4, r7, #4
 8001636:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001638:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800163c:	4b28      	ldr	r3, [pc, #160]	; (80016e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800163e:	881b      	ldrh	r3, [r3, #0]
 8001640:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
 8001646:	2300      	movs	r3, #0
 8001648:	61bb      	str	r3, [r7, #24]
 800164a:	2300      	movs	r3, #0
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
 800164e:	2300      	movs	r3, #0
 8001650:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001652:	2300      	movs	r3, #0
 8001654:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001656:	4b23      	ldr	r3, [pc, #140]	; (80016e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	f003 030c 	and.w	r3, r3, #12
 8001662:	2b04      	cmp	r3, #4
 8001664:	d002      	beq.n	800166c <HAL_RCC_GetSysClockFreq+0x40>
 8001666:	2b08      	cmp	r3, #8
 8001668:	d003      	beq.n	8001672 <HAL_RCC_GetSysClockFreq+0x46>
 800166a:	e02d      	b.n	80016c8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800166c:	4b1e      	ldr	r3, [pc, #120]	; (80016e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800166e:	623b      	str	r3, [r7, #32]
      break;
 8001670:	e02d      	b.n	80016ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	0c9b      	lsrs	r3, r3, #18
 8001676:	f003 030f 	and.w	r3, r3, #15
 800167a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800167e:	4413      	add	r3, r2
 8001680:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001684:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d013      	beq.n	80016b8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001690:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	0c5b      	lsrs	r3, r3, #17
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800169e:	4413      	add	r3, r2
 80016a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80016a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	4a0f      	ldr	r2, [pc, #60]	; (80016e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016aa:	fb02 f203 	mul.w	r2, r2, r3
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
 80016b6:	e004      	b.n	80016c2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	4a0c      	ldr	r2, [pc, #48]	; (80016ec <HAL_RCC_GetSysClockFreq+0xc0>)
 80016bc:	fb02 f303 	mul.w	r3, r2, r3
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80016c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c4:	623b      	str	r3, [r7, #32]
      break;
 80016c6:	e002      	b.n	80016ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016c8:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016ca:	623b      	str	r3, [r7, #32]
      break;
 80016cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016ce:	6a3b      	ldr	r3, [r7, #32]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3728      	adds	r7, #40	; 0x28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc90      	pop	{r4, r7}
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	080028e0 	.word	0x080028e0
 80016e0:	080028f0 	.word	0x080028f0
 80016e4:	40021000 	.word	0x40021000
 80016e8:	007a1200 	.word	0x007a1200
 80016ec:	003d0900 	.word	0x003d0900

080016f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016f4:	4b02      	ldr	r3, [pc, #8]	; (8001700 <HAL_RCC_GetHCLKFreq+0x10>)
 80016f6:	681b      	ldr	r3, [r3, #0]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr
 8001700:	20000024 	.word	0x20000024

08001704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001708:	f7ff fff2 	bl	80016f0 <HAL_RCC_GetHCLKFreq>
 800170c:	4601      	mov	r1, r0
 800170e:	4b05      	ldr	r3, [pc, #20]	; (8001724 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	0a1b      	lsrs	r3, r3, #8
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	4a03      	ldr	r2, [pc, #12]	; (8001728 <HAL_RCC_GetPCLK1Freq+0x24>)
 800171a:	5cd3      	ldrb	r3, [r2, r3]
 800171c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001720:	4618      	mov	r0, r3
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40021000 	.word	0x40021000
 8001728:	08002904 	.word	0x08002904

0800172c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001730:	f7ff ffde 	bl	80016f0 <HAL_RCC_GetHCLKFreq>
 8001734:	4601      	mov	r1, r0
 8001736:	4b05      	ldr	r3, [pc, #20]	; (800174c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	0adb      	lsrs	r3, r3, #11
 800173c:	f003 0307 	and.w	r3, r3, #7
 8001740:	4a03      	ldr	r2, [pc, #12]	; (8001750 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001742:	5cd3      	ldrb	r3, [r2, r3]
 8001744:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001748:	4618      	mov	r0, r3
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40021000 	.word	0x40021000
 8001750:	08002904 	.word	0x08002904

08001754 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800175c:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <RCC_Delay+0x34>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a0a      	ldr	r2, [pc, #40]	; (800178c <RCC_Delay+0x38>)
 8001762:	fba2 2303 	umull	r2, r3, r2, r3
 8001766:	0a5b      	lsrs	r3, r3, #9
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	fb02 f303 	mul.w	r3, r2, r3
 800176e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001770:	bf00      	nop
  }
  while (Delay --);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	1e5a      	subs	r2, r3, #1
 8001776:	60fa      	str	r2, [r7, #12]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d1f9      	bne.n	8001770 <RCC_Delay+0x1c>
}
 800177c:	bf00      	nop
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	20000024 	.word	0x20000024
 800178c:	10624dd3 	.word	0x10624dd3

08001790 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e03f      	b.n	8001822 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d106      	bne.n	80017bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f7fe ffa8 	bl	800070c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2224      	movs	r2, #36	; 0x24
 80017c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	68da      	ldr	r2, [r3, #12]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80017d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f000 fb83 	bl	8001ee0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	691a      	ldr	r2, [r3, #16]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80017e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	695a      	ldr	r2, [r3, #20]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80017f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	68da      	ldr	r2, [r3, #12]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001808:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2220      	movs	r2, #32
 8001814:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2220      	movs	r2, #32
 800181c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b08a      	sub	sp, #40	; 0x28
 800182e:	af02      	add	r7, sp, #8
 8001830:	60f8      	str	r0, [r7, #12]
 8001832:	60b9      	str	r1, [r7, #8]
 8001834:	603b      	str	r3, [r7, #0]
 8001836:	4613      	mov	r3, r2
 8001838:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b20      	cmp	r3, #32
 8001848:	d17c      	bne.n	8001944 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d002      	beq.n	8001856 <HAL_UART_Transmit+0x2c>
 8001850:	88fb      	ldrh	r3, [r7, #6]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e075      	b.n	8001946 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001860:	2b01      	cmp	r3, #1
 8001862:	d101      	bne.n	8001868 <HAL_UART_Transmit+0x3e>
 8001864:	2302      	movs	r3, #2
 8001866:	e06e      	b.n	8001946 <HAL_UART_Transmit+0x11c>
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2200      	movs	r2, #0
 8001874:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2221      	movs	r2, #33	; 0x21
 800187a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800187e:	f7ff f883 	bl	8000988 <HAL_GetTick>
 8001882:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	88fa      	ldrh	r2, [r7, #6]
 8001888:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	88fa      	ldrh	r2, [r7, #6]
 800188e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001898:	d108      	bne.n	80018ac <HAL_UART_Transmit+0x82>
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d104      	bne.n	80018ac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	61bb      	str	r3, [r7, #24]
 80018aa:	e003      	b.n	80018b4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80018bc:	e02a      	b.n	8001914 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	2200      	movs	r2, #0
 80018c6:	2180      	movs	r1, #128	; 0x80
 80018c8:	68f8      	ldr	r0, [r7, #12]
 80018ca:	f000 f9a7 	bl	8001c1c <UART_WaitOnFlagUntilTimeout>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e036      	b.n	8001946 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10b      	bne.n	80018f6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	461a      	mov	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80018ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	3302      	adds	r3, #2
 80018f2:	61bb      	str	r3, [r7, #24]
 80018f4:	e007      	b.n	8001906 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	781a      	ldrb	r2, [r3, #0]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	3301      	adds	r3, #1
 8001904:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800190a:	b29b      	uxth	r3, r3
 800190c:	3b01      	subs	r3, #1
 800190e:	b29a      	uxth	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001918:	b29b      	uxth	r3, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1cf      	bne.n	80018be <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	2200      	movs	r2, #0
 8001926:	2140      	movs	r1, #64	; 0x40
 8001928:	68f8      	ldr	r0, [r7, #12]
 800192a:	f000 f977 	bl	8001c1c <UART_WaitOnFlagUntilTimeout>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e006      	b.n	8001946 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2220      	movs	r2, #32
 800193c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001940:	2300      	movs	r3, #0
 8001942:	e000      	b.n	8001946 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001944:	2302      	movs	r3, #2
  }
}
 8001946:	4618      	mov	r0, r3
 8001948:	3720      	adds	r7, #32
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800194e:	b480      	push	{r7}
 8001950:	b085      	sub	sp, #20
 8001952:	af00      	add	r7, sp, #0
 8001954:	60f8      	str	r0, [r7, #12]
 8001956:	60b9      	str	r1, [r7, #8]
 8001958:	4613      	mov	r3, r2
 800195a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2b20      	cmp	r3, #32
 8001966:	d140      	bne.n	80019ea <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d002      	beq.n	8001974 <HAL_UART_Receive_IT+0x26>
 800196e:	88fb      	ldrh	r3, [r7, #6]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d101      	bne.n	8001978 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e039      	b.n	80019ec <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800197e:	2b01      	cmp	r3, #1
 8001980:	d101      	bne.n	8001986 <HAL_UART_Receive_IT+0x38>
 8001982:	2302      	movs	r3, #2
 8001984:	e032      	b.n	80019ec <HAL_UART_Receive_IT+0x9e>
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2201      	movs	r2, #1
 800198a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	68ba      	ldr	r2, [r7, #8]
 8001992:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	88fa      	ldrh	r2, [r7, #6]
 8001998:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	88fa      	ldrh	r2, [r7, #6]
 800199e:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2200      	movs	r2, #0
 80019a4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2222      	movs	r2, #34	; 0x22
 80019aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	68da      	ldr	r2, [r3, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019c4:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	695a      	ldr	r2, [r3, #20]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f042 0201 	orr.w	r2, r2, #1
 80019d4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68da      	ldr	r2, [r3, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f042 0220 	orr.w	r2, r2, #32
 80019e4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	e000      	b.n	80019ec <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80019ea:	2302      	movs	r3, #2
  }
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr
	...

080019f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10d      	bne.n	8001a4a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	f003 0320 	and.w	r3, r3, #32
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d008      	beq.n	8001a4a <HAL_UART_IRQHandler+0x52>
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	f003 0320 	and.w	r3, r3, #32
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 f9cc 	bl	8001de0 <UART_Receive_IT>
      return;
 8001a48:	e0d1      	b.n	8001bee <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f000 80b0 	beq.w	8001bb2 <HAL_UART_IRQHandler+0x1ba>
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d105      	bne.n	8001a68 <HAL_UART_IRQHandler+0x70>
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 80a5 	beq.w	8001bb2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00a      	beq.n	8001a88 <HAL_UART_IRQHandler+0x90>
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d005      	beq.n	8001a88 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a80:	f043 0201 	orr.w	r2, r3, #1
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f003 0304 	and.w	r3, r3, #4
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d00a      	beq.n	8001aa8 <HAL_UART_IRQHandler+0xb0>
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d005      	beq.n	8001aa8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa0:	f043 0202 	orr.w	r2, r3, #2
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d00a      	beq.n	8001ac8 <HAL_UART_IRQHandler+0xd0>
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d005      	beq.n	8001ac8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ac0:	f043 0204 	orr.w	r2, r3, #4
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f003 0308 	and.w	r3, r3, #8
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d00f      	beq.n	8001af2 <HAL_UART_IRQHandler+0xfa>
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	f003 0320 	and.w	r3, r3, #32
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d104      	bne.n	8001ae6 <HAL_UART_IRQHandler+0xee>
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d005      	beq.n	8001af2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aea:	f043 0208 	orr.w	r2, r3, #8
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d078      	beq.n	8001bec <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	f003 0320 	and.w	r3, r3, #32
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d007      	beq.n	8001b14 <HAL_UART_IRQHandler+0x11c>
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	f003 0320 	and.w	r3, r3, #32
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d002      	beq.n	8001b14 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f966 	bl	8001de0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	bf14      	ite	ne
 8001b22:	2301      	movne	r3, #1
 8001b24:	2300      	moveq	r3, #0
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d102      	bne.n	8001b3c <HAL_UART_IRQHandler+0x144>
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d031      	beq.n	8001ba0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f000 f8b7 	bl	8001cb0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d023      	beq.n	8001b98 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	695a      	ldr	r2, [r3, #20]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b5e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d013      	beq.n	8001b90 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b6c:	4a21      	ldr	r2, [pc, #132]	; (8001bf4 <HAL_UART_IRQHandler+0x1fc>)
 8001b6e:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff f81f 	bl	8000bb8 <HAL_DMA_Abort_IT>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d016      	beq.n	8001bae <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b8e:	e00e      	b.n	8001bae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f000 f83a 	bl	8001c0a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b96:	e00a      	b.n	8001bae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 f836 	bl	8001c0a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b9e:	e006      	b.n	8001bae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 f832 	bl	8001c0a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001bac:	e01e      	b.n	8001bec <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bae:	bf00      	nop
    return;
 8001bb0:	e01c      	b.n	8001bec <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d008      	beq.n	8001bce <HAL_UART_IRQHandler+0x1d6>
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 f8a3 	bl	8001d12 <UART_Transmit_IT>
    return;
 8001bcc:	e00f      	b.n	8001bee <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d00a      	beq.n	8001bee <HAL_UART_IRQHandler+0x1f6>
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d005      	beq.n	8001bee <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f8e4 	bl	8001db0 <UART_EndTransmit_IT>
    return;
 8001be8:	bf00      	nop
 8001bea:	e000      	b.n	8001bee <HAL_UART_IRQHandler+0x1f6>
    return;
 8001bec:	bf00      	nop
  }
}
 8001bee:	3720      	adds	r7, #32
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	08001ceb 	.word	0x08001ceb

08001bf8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr

08001c0a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr

08001c1c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	603b      	str	r3, [r7, #0]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c2c:	e02c      	b.n	8001c88 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c34:	d028      	beq.n	8001c88 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d007      	beq.n	8001c4c <UART_WaitOnFlagUntilTimeout+0x30>
 8001c3c:	f7fe fea4 	bl	8000988 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d21d      	bcs.n	8001c88 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68da      	ldr	r2, [r3, #12]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001c5a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	695a      	ldr	r2, [r3, #20]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 0201 	bic.w	r2, r2, #1
 8001c6a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2220      	movs	r2, #32
 8001c70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2220      	movs	r2, #32
 8001c78:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e00f      	b.n	8001ca8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	4013      	ands	r3, r2
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	bf0c      	ite	eq
 8001c98:	2301      	moveq	r3, #1
 8001c9a:	2300      	movne	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d0c3      	beq.n	8001c2e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68da      	ldr	r2, [r3, #12]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001cc6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	695a      	ldr	r2, [r3, #20]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f022 0201 	bic.w	r2, r2, #1
 8001cd6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2220      	movs	r2, #32
 8001cdc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr

08001cea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b084      	sub	sp, #16
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2200      	movs	r2, #0
 8001d02:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f7ff ff80 	bl	8001c0a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001d0a:	bf00      	nop
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b085      	sub	sp, #20
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b21      	cmp	r3, #33	; 0x21
 8001d24:	d13e      	bne.n	8001da4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d2e:	d114      	bne.n	8001d5a <UART_Transmit_IT+0x48>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d110      	bne.n	8001d5a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	881b      	ldrh	r3, [r3, #0]
 8001d42:	461a      	mov	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d4c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a1b      	ldr	r3, [r3, #32]
 8001d52:	1c9a      	adds	r2, r3, #2
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	621a      	str	r2, [r3, #32]
 8001d58:	e008      	b.n	8001d6c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	1c59      	adds	r1, r3, #1
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	6211      	str	r1, [r2, #32]
 8001d64:	781a      	ldrb	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	3b01      	subs	r3, #1
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	4619      	mov	r1, r3
 8001d7a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d10f      	bne.n	8001da0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68da      	ldr	r2, [r3, #12]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68da      	ldr	r2, [r3, #12]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001da0:	2300      	movs	r3, #0
 8001da2:	e000      	b.n	8001da6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001da4:	2302      	movs	r3, #2
  }
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr

08001db0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68da      	ldr	r2, [r3, #12]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dc6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2220      	movs	r2, #32
 8001dcc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7ff ff11 	bl	8001bf8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b22      	cmp	r3, #34	; 0x22
 8001df2:	d170      	bne.n	8001ed6 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dfc:	d117      	bne.n	8001e2e <UART_Receive_IT+0x4e>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d113      	bne.n	8001e2e <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8001e06:	2300      	movs	r3, #0
 8001e08:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e26:	1c9a      	adds	r2, r3, #2
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	629a      	str	r2, [r3, #40]	; 0x28
 8001e2c:	e026      	b.n	8001e7c <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e32:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e40:	d007      	beq.n	8001e52 <UART_Receive_IT+0x72>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10a      	bne.n	8001e60 <UART_Receive_IT+0x80>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d106      	bne.n	8001e60 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	701a      	strb	r2, [r3, #0]
 8001e5e:	e008      	b.n	8001e72 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e76:	1c5a      	adds	r2, r3, #1
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	3b01      	subs	r3, #1
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	4619      	mov	r1, r3
 8001e8a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d120      	bne.n	8001ed2 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68da      	ldr	r2, [r3, #12]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 0220 	bic.w	r2, r2, #32
 8001e9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001eae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	695a      	ldr	r2, [r3, #20]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f022 0201 	bic.w	r2, r2, #1
 8001ebe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f7fe fbd3 	bl	8000674 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	e002      	b.n	8001ed8 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	e000      	b.n	8001ed8 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8001ed6:	2302      	movs	r3, #2
  }
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68da      	ldr	r2, [r3, #12]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	430a      	orrs	r2, r1
 8001efc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689a      	ldr	r2, [r3, #8]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	431a      	orrs	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	695b      	ldr	r3, [r3, #20]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001f1a:	f023 030c 	bic.w	r3, r3, #12
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6812      	ldr	r2, [r2, #0]
 8001f22:	68b9      	ldr	r1, [r7, #8]
 8001f24:	430b      	orrs	r3, r1
 8001f26:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	699a      	ldr	r2, [r3, #24]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a2c      	ldr	r2, [pc, #176]	; (8001ff4 <UART_SetConfig+0x114>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d103      	bne.n	8001f50 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001f48:	f7ff fbf0 	bl	800172c <HAL_RCC_GetPCLK2Freq>
 8001f4c:	60f8      	str	r0, [r7, #12]
 8001f4e:	e002      	b.n	8001f56 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001f50:	f7ff fbd8 	bl	8001704 <HAL_RCC_GetPCLK1Freq>
 8001f54:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	009a      	lsls	r2, r3, #2
 8001f60:	441a      	add	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f6c:	4a22      	ldr	r2, [pc, #136]	; (8001ff8 <UART_SetConfig+0x118>)
 8001f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f72:	095b      	lsrs	r3, r3, #5
 8001f74:	0119      	lsls	r1, r3, #4
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	009a      	lsls	r2, r3, #2
 8001f80:	441a      	add	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f8c:	4b1a      	ldr	r3, [pc, #104]	; (8001ff8 <UART_SetConfig+0x118>)
 8001f8e:	fba3 0302 	umull	r0, r3, r3, r2
 8001f92:	095b      	lsrs	r3, r3, #5
 8001f94:	2064      	movs	r0, #100	; 0x64
 8001f96:	fb00 f303 	mul.w	r3, r0, r3
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	011b      	lsls	r3, r3, #4
 8001f9e:	3332      	adds	r3, #50	; 0x32
 8001fa0:	4a15      	ldr	r2, [pc, #84]	; (8001ff8 <UART_SetConfig+0x118>)
 8001fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa6:	095b      	lsrs	r3, r3, #5
 8001fa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fac:	4419      	add	r1, r3
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4413      	add	r3, r2
 8001fb6:	009a      	lsls	r2, r3, #2
 8001fb8:	441a      	add	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fc4:	4b0c      	ldr	r3, [pc, #48]	; (8001ff8 <UART_SetConfig+0x118>)
 8001fc6:	fba3 0302 	umull	r0, r3, r3, r2
 8001fca:	095b      	lsrs	r3, r3, #5
 8001fcc:	2064      	movs	r0, #100	; 0x64
 8001fce:	fb00 f303 	mul.w	r3, r0, r3
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	011b      	lsls	r3, r3, #4
 8001fd6:	3332      	adds	r3, #50	; 0x32
 8001fd8:	4a07      	ldr	r2, [pc, #28]	; (8001ff8 <UART_SetConfig+0x118>)
 8001fda:	fba2 2303 	umull	r2, r3, r2, r3
 8001fde:	095b      	lsrs	r3, r3, #5
 8001fe0:	f003 020f 	and.w	r2, r3, #15
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	440a      	add	r2, r1
 8001fea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001fec:	bf00      	nop
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40013800 	.word	0x40013800
 8001ff8:	51eb851f 	.word	0x51eb851f

08001ffc <__errno>:
 8001ffc:	4b01      	ldr	r3, [pc, #4]	; (8002004 <__errno+0x8>)
 8001ffe:	6818      	ldr	r0, [r3, #0]
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	20000030 	.word	0x20000030

08002008 <__libc_init_array>:
 8002008:	b570      	push	{r4, r5, r6, lr}
 800200a:	2500      	movs	r5, #0
 800200c:	4e0c      	ldr	r6, [pc, #48]	; (8002040 <__libc_init_array+0x38>)
 800200e:	4c0d      	ldr	r4, [pc, #52]	; (8002044 <__libc_init_array+0x3c>)
 8002010:	1ba4      	subs	r4, r4, r6
 8002012:	10a4      	asrs	r4, r4, #2
 8002014:	42a5      	cmp	r5, r4
 8002016:	d109      	bne.n	800202c <__libc_init_array+0x24>
 8002018:	f000 fc46 	bl	80028a8 <_init>
 800201c:	2500      	movs	r5, #0
 800201e:	4e0a      	ldr	r6, [pc, #40]	; (8002048 <__libc_init_array+0x40>)
 8002020:	4c0a      	ldr	r4, [pc, #40]	; (800204c <__libc_init_array+0x44>)
 8002022:	1ba4      	subs	r4, r4, r6
 8002024:	10a4      	asrs	r4, r4, #2
 8002026:	42a5      	cmp	r5, r4
 8002028:	d105      	bne.n	8002036 <__libc_init_array+0x2e>
 800202a:	bd70      	pop	{r4, r5, r6, pc}
 800202c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002030:	4798      	blx	r3
 8002032:	3501      	adds	r5, #1
 8002034:	e7ee      	b.n	8002014 <__libc_init_array+0xc>
 8002036:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800203a:	4798      	blx	r3
 800203c:	3501      	adds	r5, #1
 800203e:	e7f2      	b.n	8002026 <__libc_init_array+0x1e>
 8002040:	08002940 	.word	0x08002940
 8002044:	08002940 	.word	0x08002940
 8002048:	08002940 	.word	0x08002940
 800204c:	08002944 	.word	0x08002944

08002050 <malloc>:
 8002050:	4b02      	ldr	r3, [pc, #8]	; (800205c <malloc+0xc>)
 8002052:	4601      	mov	r1, r0
 8002054:	6818      	ldr	r0, [r3, #0]
 8002056:	f000 b86b 	b.w	8002130 <_malloc_r>
 800205a:	bf00      	nop
 800205c:	20000030 	.word	0x20000030

08002060 <free>:
 8002060:	4b02      	ldr	r3, [pc, #8]	; (800206c <free+0xc>)
 8002062:	4601      	mov	r1, r0
 8002064:	6818      	ldr	r0, [r3, #0]
 8002066:	f000 b817 	b.w	8002098 <_free_r>
 800206a:	bf00      	nop
 800206c:	20000030 	.word	0x20000030

08002070 <memcpy>:
 8002070:	b510      	push	{r4, lr}
 8002072:	1e43      	subs	r3, r0, #1
 8002074:	440a      	add	r2, r1
 8002076:	4291      	cmp	r1, r2
 8002078:	d100      	bne.n	800207c <memcpy+0xc>
 800207a:	bd10      	pop	{r4, pc}
 800207c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002080:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002084:	e7f7      	b.n	8002076 <memcpy+0x6>

08002086 <memset>:
 8002086:	4603      	mov	r3, r0
 8002088:	4402      	add	r2, r0
 800208a:	4293      	cmp	r3, r2
 800208c:	d100      	bne.n	8002090 <memset+0xa>
 800208e:	4770      	bx	lr
 8002090:	f803 1b01 	strb.w	r1, [r3], #1
 8002094:	e7f9      	b.n	800208a <memset+0x4>
	...

08002098 <_free_r>:
 8002098:	b538      	push	{r3, r4, r5, lr}
 800209a:	4605      	mov	r5, r0
 800209c:	2900      	cmp	r1, #0
 800209e:	d043      	beq.n	8002128 <_free_r+0x90>
 80020a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80020a4:	1f0c      	subs	r4, r1, #4
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	bfb8      	it	lt
 80020aa:	18e4      	addlt	r4, r4, r3
 80020ac:	f000 f8ca 	bl	8002244 <__malloc_lock>
 80020b0:	4a1e      	ldr	r2, [pc, #120]	; (800212c <_free_r+0x94>)
 80020b2:	6813      	ldr	r3, [r2, #0]
 80020b4:	4610      	mov	r0, r2
 80020b6:	b933      	cbnz	r3, 80020c6 <_free_r+0x2e>
 80020b8:	6063      	str	r3, [r4, #4]
 80020ba:	6014      	str	r4, [r2, #0]
 80020bc:	4628      	mov	r0, r5
 80020be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80020c2:	f000 b8c0 	b.w	8002246 <__malloc_unlock>
 80020c6:	42a3      	cmp	r3, r4
 80020c8:	d90b      	bls.n	80020e2 <_free_r+0x4a>
 80020ca:	6821      	ldr	r1, [r4, #0]
 80020cc:	1862      	adds	r2, r4, r1
 80020ce:	4293      	cmp	r3, r2
 80020d0:	bf01      	itttt	eq
 80020d2:	681a      	ldreq	r2, [r3, #0]
 80020d4:	685b      	ldreq	r3, [r3, #4]
 80020d6:	1852      	addeq	r2, r2, r1
 80020d8:	6022      	streq	r2, [r4, #0]
 80020da:	6063      	str	r3, [r4, #4]
 80020dc:	6004      	str	r4, [r0, #0]
 80020de:	e7ed      	b.n	80020bc <_free_r+0x24>
 80020e0:	4613      	mov	r3, r2
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	b10a      	cbz	r2, 80020ea <_free_r+0x52>
 80020e6:	42a2      	cmp	r2, r4
 80020e8:	d9fa      	bls.n	80020e0 <_free_r+0x48>
 80020ea:	6819      	ldr	r1, [r3, #0]
 80020ec:	1858      	adds	r0, r3, r1
 80020ee:	42a0      	cmp	r0, r4
 80020f0:	d10b      	bne.n	800210a <_free_r+0x72>
 80020f2:	6820      	ldr	r0, [r4, #0]
 80020f4:	4401      	add	r1, r0
 80020f6:	1858      	adds	r0, r3, r1
 80020f8:	4282      	cmp	r2, r0
 80020fa:	6019      	str	r1, [r3, #0]
 80020fc:	d1de      	bne.n	80020bc <_free_r+0x24>
 80020fe:	6810      	ldr	r0, [r2, #0]
 8002100:	6852      	ldr	r2, [r2, #4]
 8002102:	4401      	add	r1, r0
 8002104:	6019      	str	r1, [r3, #0]
 8002106:	605a      	str	r2, [r3, #4]
 8002108:	e7d8      	b.n	80020bc <_free_r+0x24>
 800210a:	d902      	bls.n	8002112 <_free_r+0x7a>
 800210c:	230c      	movs	r3, #12
 800210e:	602b      	str	r3, [r5, #0]
 8002110:	e7d4      	b.n	80020bc <_free_r+0x24>
 8002112:	6820      	ldr	r0, [r4, #0]
 8002114:	1821      	adds	r1, r4, r0
 8002116:	428a      	cmp	r2, r1
 8002118:	bf01      	itttt	eq
 800211a:	6811      	ldreq	r1, [r2, #0]
 800211c:	6852      	ldreq	r2, [r2, #4]
 800211e:	1809      	addeq	r1, r1, r0
 8002120:	6021      	streq	r1, [r4, #0]
 8002122:	6062      	str	r2, [r4, #4]
 8002124:	605c      	str	r4, [r3, #4]
 8002126:	e7c9      	b.n	80020bc <_free_r+0x24>
 8002128:	bd38      	pop	{r3, r4, r5, pc}
 800212a:	bf00      	nop
 800212c:	200001b8 	.word	0x200001b8

08002130 <_malloc_r>:
 8002130:	b570      	push	{r4, r5, r6, lr}
 8002132:	1ccd      	adds	r5, r1, #3
 8002134:	f025 0503 	bic.w	r5, r5, #3
 8002138:	3508      	adds	r5, #8
 800213a:	2d0c      	cmp	r5, #12
 800213c:	bf38      	it	cc
 800213e:	250c      	movcc	r5, #12
 8002140:	2d00      	cmp	r5, #0
 8002142:	4606      	mov	r6, r0
 8002144:	db01      	blt.n	800214a <_malloc_r+0x1a>
 8002146:	42a9      	cmp	r1, r5
 8002148:	d903      	bls.n	8002152 <_malloc_r+0x22>
 800214a:	230c      	movs	r3, #12
 800214c:	6033      	str	r3, [r6, #0]
 800214e:	2000      	movs	r0, #0
 8002150:	bd70      	pop	{r4, r5, r6, pc}
 8002152:	f000 f877 	bl	8002244 <__malloc_lock>
 8002156:	4a21      	ldr	r2, [pc, #132]	; (80021dc <_malloc_r+0xac>)
 8002158:	6814      	ldr	r4, [r2, #0]
 800215a:	4621      	mov	r1, r4
 800215c:	b991      	cbnz	r1, 8002184 <_malloc_r+0x54>
 800215e:	4c20      	ldr	r4, [pc, #128]	; (80021e0 <_malloc_r+0xb0>)
 8002160:	6823      	ldr	r3, [r4, #0]
 8002162:	b91b      	cbnz	r3, 800216c <_malloc_r+0x3c>
 8002164:	4630      	mov	r0, r6
 8002166:	f000 f83d 	bl	80021e4 <_sbrk_r>
 800216a:	6020      	str	r0, [r4, #0]
 800216c:	4629      	mov	r1, r5
 800216e:	4630      	mov	r0, r6
 8002170:	f000 f838 	bl	80021e4 <_sbrk_r>
 8002174:	1c43      	adds	r3, r0, #1
 8002176:	d124      	bne.n	80021c2 <_malloc_r+0x92>
 8002178:	230c      	movs	r3, #12
 800217a:	4630      	mov	r0, r6
 800217c:	6033      	str	r3, [r6, #0]
 800217e:	f000 f862 	bl	8002246 <__malloc_unlock>
 8002182:	e7e4      	b.n	800214e <_malloc_r+0x1e>
 8002184:	680b      	ldr	r3, [r1, #0]
 8002186:	1b5b      	subs	r3, r3, r5
 8002188:	d418      	bmi.n	80021bc <_malloc_r+0x8c>
 800218a:	2b0b      	cmp	r3, #11
 800218c:	d90f      	bls.n	80021ae <_malloc_r+0x7e>
 800218e:	600b      	str	r3, [r1, #0]
 8002190:	18cc      	adds	r4, r1, r3
 8002192:	50cd      	str	r5, [r1, r3]
 8002194:	4630      	mov	r0, r6
 8002196:	f000 f856 	bl	8002246 <__malloc_unlock>
 800219a:	f104 000b 	add.w	r0, r4, #11
 800219e:	1d23      	adds	r3, r4, #4
 80021a0:	f020 0007 	bic.w	r0, r0, #7
 80021a4:	1ac3      	subs	r3, r0, r3
 80021a6:	d0d3      	beq.n	8002150 <_malloc_r+0x20>
 80021a8:	425a      	negs	r2, r3
 80021aa:	50e2      	str	r2, [r4, r3]
 80021ac:	e7d0      	b.n	8002150 <_malloc_r+0x20>
 80021ae:	684b      	ldr	r3, [r1, #4]
 80021b0:	428c      	cmp	r4, r1
 80021b2:	bf16      	itet	ne
 80021b4:	6063      	strne	r3, [r4, #4]
 80021b6:	6013      	streq	r3, [r2, #0]
 80021b8:	460c      	movne	r4, r1
 80021ba:	e7eb      	b.n	8002194 <_malloc_r+0x64>
 80021bc:	460c      	mov	r4, r1
 80021be:	6849      	ldr	r1, [r1, #4]
 80021c0:	e7cc      	b.n	800215c <_malloc_r+0x2c>
 80021c2:	1cc4      	adds	r4, r0, #3
 80021c4:	f024 0403 	bic.w	r4, r4, #3
 80021c8:	42a0      	cmp	r0, r4
 80021ca:	d005      	beq.n	80021d8 <_malloc_r+0xa8>
 80021cc:	1a21      	subs	r1, r4, r0
 80021ce:	4630      	mov	r0, r6
 80021d0:	f000 f808 	bl	80021e4 <_sbrk_r>
 80021d4:	3001      	adds	r0, #1
 80021d6:	d0cf      	beq.n	8002178 <_malloc_r+0x48>
 80021d8:	6025      	str	r5, [r4, #0]
 80021da:	e7db      	b.n	8002194 <_malloc_r+0x64>
 80021dc:	200001b8 	.word	0x200001b8
 80021e0:	200001bc 	.word	0x200001bc

080021e4 <_sbrk_r>:
 80021e4:	b538      	push	{r3, r4, r5, lr}
 80021e6:	2300      	movs	r3, #0
 80021e8:	4c05      	ldr	r4, [pc, #20]	; (8002200 <_sbrk_r+0x1c>)
 80021ea:	4605      	mov	r5, r0
 80021ec:	4608      	mov	r0, r1
 80021ee:	6023      	str	r3, [r4, #0]
 80021f0:	f7fe fb10 	bl	8000814 <_sbrk>
 80021f4:	1c43      	adds	r3, r0, #1
 80021f6:	d102      	bne.n	80021fe <_sbrk_r+0x1a>
 80021f8:	6823      	ldr	r3, [r4, #0]
 80021fa:	b103      	cbz	r3, 80021fe <_sbrk_r+0x1a>
 80021fc:	602b      	str	r3, [r5, #0]
 80021fe:	bd38      	pop	{r3, r4, r5, pc}
 8002200:	2000020c 	.word	0x2000020c

08002204 <_vsiprintf_r>:
 8002204:	b500      	push	{lr}
 8002206:	b09b      	sub	sp, #108	; 0x6c
 8002208:	9100      	str	r1, [sp, #0]
 800220a:	9104      	str	r1, [sp, #16]
 800220c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002210:	9105      	str	r1, [sp, #20]
 8002212:	9102      	str	r1, [sp, #8]
 8002214:	4905      	ldr	r1, [pc, #20]	; (800222c <_vsiprintf_r+0x28>)
 8002216:	9103      	str	r1, [sp, #12]
 8002218:	4669      	mov	r1, sp
 800221a:	f000 f86f 	bl	80022fc <_svfiprintf_r>
 800221e:	2200      	movs	r2, #0
 8002220:	9b00      	ldr	r3, [sp, #0]
 8002222:	701a      	strb	r2, [r3, #0]
 8002224:	b01b      	add	sp, #108	; 0x6c
 8002226:	f85d fb04 	ldr.w	pc, [sp], #4
 800222a:	bf00      	nop
 800222c:	ffff0208 	.word	0xffff0208

08002230 <vsiprintf>:
 8002230:	4613      	mov	r3, r2
 8002232:	460a      	mov	r2, r1
 8002234:	4601      	mov	r1, r0
 8002236:	4802      	ldr	r0, [pc, #8]	; (8002240 <vsiprintf+0x10>)
 8002238:	6800      	ldr	r0, [r0, #0]
 800223a:	f7ff bfe3 	b.w	8002204 <_vsiprintf_r>
 800223e:	bf00      	nop
 8002240:	20000030 	.word	0x20000030

08002244 <__malloc_lock>:
 8002244:	4770      	bx	lr

08002246 <__malloc_unlock>:
 8002246:	4770      	bx	lr

08002248 <__ssputs_r>:
 8002248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800224c:	688e      	ldr	r6, [r1, #8]
 800224e:	4682      	mov	sl, r0
 8002250:	429e      	cmp	r6, r3
 8002252:	460c      	mov	r4, r1
 8002254:	4690      	mov	r8, r2
 8002256:	4699      	mov	r9, r3
 8002258:	d837      	bhi.n	80022ca <__ssputs_r+0x82>
 800225a:	898a      	ldrh	r2, [r1, #12]
 800225c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002260:	d031      	beq.n	80022c6 <__ssputs_r+0x7e>
 8002262:	2302      	movs	r3, #2
 8002264:	6825      	ldr	r5, [r4, #0]
 8002266:	6909      	ldr	r1, [r1, #16]
 8002268:	1a6f      	subs	r7, r5, r1
 800226a:	6965      	ldr	r5, [r4, #20]
 800226c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002270:	fb95 f5f3 	sdiv	r5, r5, r3
 8002274:	f109 0301 	add.w	r3, r9, #1
 8002278:	443b      	add	r3, r7
 800227a:	429d      	cmp	r5, r3
 800227c:	bf38      	it	cc
 800227e:	461d      	movcc	r5, r3
 8002280:	0553      	lsls	r3, r2, #21
 8002282:	d530      	bpl.n	80022e6 <__ssputs_r+0x9e>
 8002284:	4629      	mov	r1, r5
 8002286:	f7ff ff53 	bl	8002130 <_malloc_r>
 800228a:	4606      	mov	r6, r0
 800228c:	b950      	cbnz	r0, 80022a4 <__ssputs_r+0x5c>
 800228e:	230c      	movs	r3, #12
 8002290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002294:	f8ca 3000 	str.w	r3, [sl]
 8002298:	89a3      	ldrh	r3, [r4, #12]
 800229a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800229e:	81a3      	strh	r3, [r4, #12]
 80022a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022a4:	463a      	mov	r2, r7
 80022a6:	6921      	ldr	r1, [r4, #16]
 80022a8:	f7ff fee2 	bl	8002070 <memcpy>
 80022ac:	89a3      	ldrh	r3, [r4, #12]
 80022ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80022b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022b6:	81a3      	strh	r3, [r4, #12]
 80022b8:	6126      	str	r6, [r4, #16]
 80022ba:	443e      	add	r6, r7
 80022bc:	6026      	str	r6, [r4, #0]
 80022be:	464e      	mov	r6, r9
 80022c0:	6165      	str	r5, [r4, #20]
 80022c2:	1bed      	subs	r5, r5, r7
 80022c4:	60a5      	str	r5, [r4, #8]
 80022c6:	454e      	cmp	r6, r9
 80022c8:	d900      	bls.n	80022cc <__ssputs_r+0x84>
 80022ca:	464e      	mov	r6, r9
 80022cc:	4632      	mov	r2, r6
 80022ce:	4641      	mov	r1, r8
 80022d0:	6820      	ldr	r0, [r4, #0]
 80022d2:	f000 faa1 	bl	8002818 <memmove>
 80022d6:	68a3      	ldr	r3, [r4, #8]
 80022d8:	2000      	movs	r0, #0
 80022da:	1b9b      	subs	r3, r3, r6
 80022dc:	60a3      	str	r3, [r4, #8]
 80022de:	6823      	ldr	r3, [r4, #0]
 80022e0:	441e      	add	r6, r3
 80022e2:	6026      	str	r6, [r4, #0]
 80022e4:	e7dc      	b.n	80022a0 <__ssputs_r+0x58>
 80022e6:	462a      	mov	r2, r5
 80022e8:	f000 faaf 	bl	800284a <_realloc_r>
 80022ec:	4606      	mov	r6, r0
 80022ee:	2800      	cmp	r0, #0
 80022f0:	d1e2      	bne.n	80022b8 <__ssputs_r+0x70>
 80022f2:	6921      	ldr	r1, [r4, #16]
 80022f4:	4650      	mov	r0, sl
 80022f6:	f7ff fecf 	bl	8002098 <_free_r>
 80022fa:	e7c8      	b.n	800228e <__ssputs_r+0x46>

080022fc <_svfiprintf_r>:
 80022fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002300:	461d      	mov	r5, r3
 8002302:	898b      	ldrh	r3, [r1, #12]
 8002304:	b09d      	sub	sp, #116	; 0x74
 8002306:	061f      	lsls	r7, r3, #24
 8002308:	4680      	mov	r8, r0
 800230a:	460c      	mov	r4, r1
 800230c:	4616      	mov	r6, r2
 800230e:	d50f      	bpl.n	8002330 <_svfiprintf_r+0x34>
 8002310:	690b      	ldr	r3, [r1, #16]
 8002312:	b96b      	cbnz	r3, 8002330 <_svfiprintf_r+0x34>
 8002314:	2140      	movs	r1, #64	; 0x40
 8002316:	f7ff ff0b 	bl	8002130 <_malloc_r>
 800231a:	6020      	str	r0, [r4, #0]
 800231c:	6120      	str	r0, [r4, #16]
 800231e:	b928      	cbnz	r0, 800232c <_svfiprintf_r+0x30>
 8002320:	230c      	movs	r3, #12
 8002322:	f8c8 3000 	str.w	r3, [r8]
 8002326:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800232a:	e0c8      	b.n	80024be <_svfiprintf_r+0x1c2>
 800232c:	2340      	movs	r3, #64	; 0x40
 800232e:	6163      	str	r3, [r4, #20]
 8002330:	2300      	movs	r3, #0
 8002332:	9309      	str	r3, [sp, #36]	; 0x24
 8002334:	2320      	movs	r3, #32
 8002336:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800233a:	2330      	movs	r3, #48	; 0x30
 800233c:	f04f 0b01 	mov.w	fp, #1
 8002340:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002344:	9503      	str	r5, [sp, #12]
 8002346:	4637      	mov	r7, r6
 8002348:	463d      	mov	r5, r7
 800234a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800234e:	b10b      	cbz	r3, 8002354 <_svfiprintf_r+0x58>
 8002350:	2b25      	cmp	r3, #37	; 0x25
 8002352:	d13e      	bne.n	80023d2 <_svfiprintf_r+0xd6>
 8002354:	ebb7 0a06 	subs.w	sl, r7, r6
 8002358:	d00b      	beq.n	8002372 <_svfiprintf_r+0x76>
 800235a:	4653      	mov	r3, sl
 800235c:	4632      	mov	r2, r6
 800235e:	4621      	mov	r1, r4
 8002360:	4640      	mov	r0, r8
 8002362:	f7ff ff71 	bl	8002248 <__ssputs_r>
 8002366:	3001      	adds	r0, #1
 8002368:	f000 80a4 	beq.w	80024b4 <_svfiprintf_r+0x1b8>
 800236c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800236e:	4453      	add	r3, sl
 8002370:	9309      	str	r3, [sp, #36]	; 0x24
 8002372:	783b      	ldrb	r3, [r7, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 809d 	beq.w	80024b4 <_svfiprintf_r+0x1b8>
 800237a:	2300      	movs	r3, #0
 800237c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002380:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002384:	9304      	str	r3, [sp, #16]
 8002386:	9307      	str	r3, [sp, #28]
 8002388:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800238c:	931a      	str	r3, [sp, #104]	; 0x68
 800238e:	462f      	mov	r7, r5
 8002390:	2205      	movs	r2, #5
 8002392:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002396:	4850      	ldr	r0, [pc, #320]	; (80024d8 <_svfiprintf_r+0x1dc>)
 8002398:	f000 fa30 	bl	80027fc <memchr>
 800239c:	9b04      	ldr	r3, [sp, #16]
 800239e:	b9d0      	cbnz	r0, 80023d6 <_svfiprintf_r+0xda>
 80023a0:	06d9      	lsls	r1, r3, #27
 80023a2:	bf44      	itt	mi
 80023a4:	2220      	movmi	r2, #32
 80023a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80023aa:	071a      	lsls	r2, r3, #28
 80023ac:	bf44      	itt	mi
 80023ae:	222b      	movmi	r2, #43	; 0x2b
 80023b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80023b4:	782a      	ldrb	r2, [r5, #0]
 80023b6:	2a2a      	cmp	r2, #42	; 0x2a
 80023b8:	d015      	beq.n	80023e6 <_svfiprintf_r+0xea>
 80023ba:	462f      	mov	r7, r5
 80023bc:	2000      	movs	r0, #0
 80023be:	250a      	movs	r5, #10
 80023c0:	9a07      	ldr	r2, [sp, #28]
 80023c2:	4639      	mov	r1, r7
 80023c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80023c8:	3b30      	subs	r3, #48	; 0x30
 80023ca:	2b09      	cmp	r3, #9
 80023cc:	d94d      	bls.n	800246a <_svfiprintf_r+0x16e>
 80023ce:	b1b8      	cbz	r0, 8002400 <_svfiprintf_r+0x104>
 80023d0:	e00f      	b.n	80023f2 <_svfiprintf_r+0xf6>
 80023d2:	462f      	mov	r7, r5
 80023d4:	e7b8      	b.n	8002348 <_svfiprintf_r+0x4c>
 80023d6:	4a40      	ldr	r2, [pc, #256]	; (80024d8 <_svfiprintf_r+0x1dc>)
 80023d8:	463d      	mov	r5, r7
 80023da:	1a80      	subs	r0, r0, r2
 80023dc:	fa0b f000 	lsl.w	r0, fp, r0
 80023e0:	4318      	orrs	r0, r3
 80023e2:	9004      	str	r0, [sp, #16]
 80023e4:	e7d3      	b.n	800238e <_svfiprintf_r+0x92>
 80023e6:	9a03      	ldr	r2, [sp, #12]
 80023e8:	1d11      	adds	r1, r2, #4
 80023ea:	6812      	ldr	r2, [r2, #0]
 80023ec:	9103      	str	r1, [sp, #12]
 80023ee:	2a00      	cmp	r2, #0
 80023f0:	db01      	blt.n	80023f6 <_svfiprintf_r+0xfa>
 80023f2:	9207      	str	r2, [sp, #28]
 80023f4:	e004      	b.n	8002400 <_svfiprintf_r+0x104>
 80023f6:	4252      	negs	r2, r2
 80023f8:	f043 0302 	orr.w	r3, r3, #2
 80023fc:	9207      	str	r2, [sp, #28]
 80023fe:	9304      	str	r3, [sp, #16]
 8002400:	783b      	ldrb	r3, [r7, #0]
 8002402:	2b2e      	cmp	r3, #46	; 0x2e
 8002404:	d10c      	bne.n	8002420 <_svfiprintf_r+0x124>
 8002406:	787b      	ldrb	r3, [r7, #1]
 8002408:	2b2a      	cmp	r3, #42	; 0x2a
 800240a:	d133      	bne.n	8002474 <_svfiprintf_r+0x178>
 800240c:	9b03      	ldr	r3, [sp, #12]
 800240e:	3702      	adds	r7, #2
 8002410:	1d1a      	adds	r2, r3, #4
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	9203      	str	r2, [sp, #12]
 8002416:	2b00      	cmp	r3, #0
 8002418:	bfb8      	it	lt
 800241a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800241e:	9305      	str	r3, [sp, #20]
 8002420:	4d2e      	ldr	r5, [pc, #184]	; (80024dc <_svfiprintf_r+0x1e0>)
 8002422:	2203      	movs	r2, #3
 8002424:	7839      	ldrb	r1, [r7, #0]
 8002426:	4628      	mov	r0, r5
 8002428:	f000 f9e8 	bl	80027fc <memchr>
 800242c:	b138      	cbz	r0, 800243e <_svfiprintf_r+0x142>
 800242e:	2340      	movs	r3, #64	; 0x40
 8002430:	1b40      	subs	r0, r0, r5
 8002432:	fa03 f000 	lsl.w	r0, r3, r0
 8002436:	9b04      	ldr	r3, [sp, #16]
 8002438:	3701      	adds	r7, #1
 800243a:	4303      	orrs	r3, r0
 800243c:	9304      	str	r3, [sp, #16]
 800243e:	7839      	ldrb	r1, [r7, #0]
 8002440:	2206      	movs	r2, #6
 8002442:	4827      	ldr	r0, [pc, #156]	; (80024e0 <_svfiprintf_r+0x1e4>)
 8002444:	1c7e      	adds	r6, r7, #1
 8002446:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800244a:	f000 f9d7 	bl	80027fc <memchr>
 800244e:	2800      	cmp	r0, #0
 8002450:	d038      	beq.n	80024c4 <_svfiprintf_r+0x1c8>
 8002452:	4b24      	ldr	r3, [pc, #144]	; (80024e4 <_svfiprintf_r+0x1e8>)
 8002454:	bb13      	cbnz	r3, 800249c <_svfiprintf_r+0x1a0>
 8002456:	9b03      	ldr	r3, [sp, #12]
 8002458:	3307      	adds	r3, #7
 800245a:	f023 0307 	bic.w	r3, r3, #7
 800245e:	3308      	adds	r3, #8
 8002460:	9303      	str	r3, [sp, #12]
 8002462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002464:	444b      	add	r3, r9
 8002466:	9309      	str	r3, [sp, #36]	; 0x24
 8002468:	e76d      	b.n	8002346 <_svfiprintf_r+0x4a>
 800246a:	fb05 3202 	mla	r2, r5, r2, r3
 800246e:	2001      	movs	r0, #1
 8002470:	460f      	mov	r7, r1
 8002472:	e7a6      	b.n	80023c2 <_svfiprintf_r+0xc6>
 8002474:	2300      	movs	r3, #0
 8002476:	250a      	movs	r5, #10
 8002478:	4619      	mov	r1, r3
 800247a:	3701      	adds	r7, #1
 800247c:	9305      	str	r3, [sp, #20]
 800247e:	4638      	mov	r0, r7
 8002480:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002484:	3a30      	subs	r2, #48	; 0x30
 8002486:	2a09      	cmp	r2, #9
 8002488:	d903      	bls.n	8002492 <_svfiprintf_r+0x196>
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0c8      	beq.n	8002420 <_svfiprintf_r+0x124>
 800248e:	9105      	str	r1, [sp, #20]
 8002490:	e7c6      	b.n	8002420 <_svfiprintf_r+0x124>
 8002492:	fb05 2101 	mla	r1, r5, r1, r2
 8002496:	2301      	movs	r3, #1
 8002498:	4607      	mov	r7, r0
 800249a:	e7f0      	b.n	800247e <_svfiprintf_r+0x182>
 800249c:	ab03      	add	r3, sp, #12
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	4622      	mov	r2, r4
 80024a2:	4b11      	ldr	r3, [pc, #68]	; (80024e8 <_svfiprintf_r+0x1ec>)
 80024a4:	a904      	add	r1, sp, #16
 80024a6:	4640      	mov	r0, r8
 80024a8:	f3af 8000 	nop.w
 80024ac:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80024b0:	4681      	mov	r9, r0
 80024b2:	d1d6      	bne.n	8002462 <_svfiprintf_r+0x166>
 80024b4:	89a3      	ldrh	r3, [r4, #12]
 80024b6:	065b      	lsls	r3, r3, #25
 80024b8:	f53f af35 	bmi.w	8002326 <_svfiprintf_r+0x2a>
 80024bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80024be:	b01d      	add	sp, #116	; 0x74
 80024c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024c4:	ab03      	add	r3, sp, #12
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	4622      	mov	r2, r4
 80024ca:	4b07      	ldr	r3, [pc, #28]	; (80024e8 <_svfiprintf_r+0x1ec>)
 80024cc:	a904      	add	r1, sp, #16
 80024ce:	4640      	mov	r0, r8
 80024d0:	f000 f882 	bl	80025d8 <_printf_i>
 80024d4:	e7ea      	b.n	80024ac <_svfiprintf_r+0x1b0>
 80024d6:	bf00      	nop
 80024d8:	0800290c 	.word	0x0800290c
 80024dc:	08002912 	.word	0x08002912
 80024e0:	08002916 	.word	0x08002916
 80024e4:	00000000 	.word	0x00000000
 80024e8:	08002249 	.word	0x08002249

080024ec <_printf_common>:
 80024ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024f0:	4691      	mov	r9, r2
 80024f2:	461f      	mov	r7, r3
 80024f4:	688a      	ldr	r2, [r1, #8]
 80024f6:	690b      	ldr	r3, [r1, #16]
 80024f8:	4606      	mov	r6, r0
 80024fa:	4293      	cmp	r3, r2
 80024fc:	bfb8      	it	lt
 80024fe:	4613      	movlt	r3, r2
 8002500:	f8c9 3000 	str.w	r3, [r9]
 8002504:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002508:	460c      	mov	r4, r1
 800250a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800250e:	b112      	cbz	r2, 8002516 <_printf_common+0x2a>
 8002510:	3301      	adds	r3, #1
 8002512:	f8c9 3000 	str.w	r3, [r9]
 8002516:	6823      	ldr	r3, [r4, #0]
 8002518:	0699      	lsls	r1, r3, #26
 800251a:	bf42      	ittt	mi
 800251c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002520:	3302      	addmi	r3, #2
 8002522:	f8c9 3000 	strmi.w	r3, [r9]
 8002526:	6825      	ldr	r5, [r4, #0]
 8002528:	f015 0506 	ands.w	r5, r5, #6
 800252c:	d107      	bne.n	800253e <_printf_common+0x52>
 800252e:	f104 0a19 	add.w	sl, r4, #25
 8002532:	68e3      	ldr	r3, [r4, #12]
 8002534:	f8d9 2000 	ldr.w	r2, [r9]
 8002538:	1a9b      	subs	r3, r3, r2
 800253a:	42ab      	cmp	r3, r5
 800253c:	dc29      	bgt.n	8002592 <_printf_common+0xa6>
 800253e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002542:	6822      	ldr	r2, [r4, #0]
 8002544:	3300      	adds	r3, #0
 8002546:	bf18      	it	ne
 8002548:	2301      	movne	r3, #1
 800254a:	0692      	lsls	r2, r2, #26
 800254c:	d42e      	bmi.n	80025ac <_printf_common+0xc0>
 800254e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002552:	4639      	mov	r1, r7
 8002554:	4630      	mov	r0, r6
 8002556:	47c0      	blx	r8
 8002558:	3001      	adds	r0, #1
 800255a:	d021      	beq.n	80025a0 <_printf_common+0xb4>
 800255c:	6823      	ldr	r3, [r4, #0]
 800255e:	68e5      	ldr	r5, [r4, #12]
 8002560:	f003 0306 	and.w	r3, r3, #6
 8002564:	2b04      	cmp	r3, #4
 8002566:	bf18      	it	ne
 8002568:	2500      	movne	r5, #0
 800256a:	f8d9 2000 	ldr.w	r2, [r9]
 800256e:	f04f 0900 	mov.w	r9, #0
 8002572:	bf08      	it	eq
 8002574:	1aad      	subeq	r5, r5, r2
 8002576:	68a3      	ldr	r3, [r4, #8]
 8002578:	6922      	ldr	r2, [r4, #16]
 800257a:	bf08      	it	eq
 800257c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002580:	4293      	cmp	r3, r2
 8002582:	bfc4      	itt	gt
 8002584:	1a9b      	subgt	r3, r3, r2
 8002586:	18ed      	addgt	r5, r5, r3
 8002588:	341a      	adds	r4, #26
 800258a:	454d      	cmp	r5, r9
 800258c:	d11a      	bne.n	80025c4 <_printf_common+0xd8>
 800258e:	2000      	movs	r0, #0
 8002590:	e008      	b.n	80025a4 <_printf_common+0xb8>
 8002592:	2301      	movs	r3, #1
 8002594:	4652      	mov	r2, sl
 8002596:	4639      	mov	r1, r7
 8002598:	4630      	mov	r0, r6
 800259a:	47c0      	blx	r8
 800259c:	3001      	adds	r0, #1
 800259e:	d103      	bne.n	80025a8 <_printf_common+0xbc>
 80025a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025a8:	3501      	adds	r5, #1
 80025aa:	e7c2      	b.n	8002532 <_printf_common+0x46>
 80025ac:	2030      	movs	r0, #48	; 0x30
 80025ae:	18e1      	adds	r1, r4, r3
 80025b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80025b4:	1c5a      	adds	r2, r3, #1
 80025b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80025ba:	4422      	add	r2, r4
 80025bc:	3302      	adds	r3, #2
 80025be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80025c2:	e7c4      	b.n	800254e <_printf_common+0x62>
 80025c4:	2301      	movs	r3, #1
 80025c6:	4622      	mov	r2, r4
 80025c8:	4639      	mov	r1, r7
 80025ca:	4630      	mov	r0, r6
 80025cc:	47c0      	blx	r8
 80025ce:	3001      	adds	r0, #1
 80025d0:	d0e6      	beq.n	80025a0 <_printf_common+0xb4>
 80025d2:	f109 0901 	add.w	r9, r9, #1
 80025d6:	e7d8      	b.n	800258a <_printf_common+0x9e>

080025d8 <_printf_i>:
 80025d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80025dc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80025e0:	460c      	mov	r4, r1
 80025e2:	7e09      	ldrb	r1, [r1, #24]
 80025e4:	b085      	sub	sp, #20
 80025e6:	296e      	cmp	r1, #110	; 0x6e
 80025e8:	4617      	mov	r7, r2
 80025ea:	4606      	mov	r6, r0
 80025ec:	4698      	mov	r8, r3
 80025ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80025f0:	f000 80b3 	beq.w	800275a <_printf_i+0x182>
 80025f4:	d822      	bhi.n	800263c <_printf_i+0x64>
 80025f6:	2963      	cmp	r1, #99	; 0x63
 80025f8:	d036      	beq.n	8002668 <_printf_i+0x90>
 80025fa:	d80a      	bhi.n	8002612 <_printf_i+0x3a>
 80025fc:	2900      	cmp	r1, #0
 80025fe:	f000 80b9 	beq.w	8002774 <_printf_i+0x19c>
 8002602:	2958      	cmp	r1, #88	; 0x58
 8002604:	f000 8083 	beq.w	800270e <_printf_i+0x136>
 8002608:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800260c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002610:	e032      	b.n	8002678 <_printf_i+0xa0>
 8002612:	2964      	cmp	r1, #100	; 0x64
 8002614:	d001      	beq.n	800261a <_printf_i+0x42>
 8002616:	2969      	cmp	r1, #105	; 0x69
 8002618:	d1f6      	bne.n	8002608 <_printf_i+0x30>
 800261a:	6820      	ldr	r0, [r4, #0]
 800261c:	6813      	ldr	r3, [r2, #0]
 800261e:	0605      	lsls	r5, r0, #24
 8002620:	f103 0104 	add.w	r1, r3, #4
 8002624:	d52a      	bpl.n	800267c <_printf_i+0xa4>
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6011      	str	r1, [r2, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	da03      	bge.n	8002636 <_printf_i+0x5e>
 800262e:	222d      	movs	r2, #45	; 0x2d
 8002630:	425b      	negs	r3, r3
 8002632:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002636:	486f      	ldr	r0, [pc, #444]	; (80027f4 <_printf_i+0x21c>)
 8002638:	220a      	movs	r2, #10
 800263a:	e039      	b.n	80026b0 <_printf_i+0xd8>
 800263c:	2973      	cmp	r1, #115	; 0x73
 800263e:	f000 809d 	beq.w	800277c <_printf_i+0x1a4>
 8002642:	d808      	bhi.n	8002656 <_printf_i+0x7e>
 8002644:	296f      	cmp	r1, #111	; 0x6f
 8002646:	d020      	beq.n	800268a <_printf_i+0xb2>
 8002648:	2970      	cmp	r1, #112	; 0x70
 800264a:	d1dd      	bne.n	8002608 <_printf_i+0x30>
 800264c:	6823      	ldr	r3, [r4, #0]
 800264e:	f043 0320 	orr.w	r3, r3, #32
 8002652:	6023      	str	r3, [r4, #0]
 8002654:	e003      	b.n	800265e <_printf_i+0x86>
 8002656:	2975      	cmp	r1, #117	; 0x75
 8002658:	d017      	beq.n	800268a <_printf_i+0xb2>
 800265a:	2978      	cmp	r1, #120	; 0x78
 800265c:	d1d4      	bne.n	8002608 <_printf_i+0x30>
 800265e:	2378      	movs	r3, #120	; 0x78
 8002660:	4865      	ldr	r0, [pc, #404]	; (80027f8 <_printf_i+0x220>)
 8002662:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002666:	e055      	b.n	8002714 <_printf_i+0x13c>
 8002668:	6813      	ldr	r3, [r2, #0]
 800266a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800266e:	1d19      	adds	r1, r3, #4
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6011      	str	r1, [r2, #0]
 8002674:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002678:	2301      	movs	r3, #1
 800267a:	e08c      	b.n	8002796 <_printf_i+0x1be>
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002682:	6011      	str	r1, [r2, #0]
 8002684:	bf18      	it	ne
 8002686:	b21b      	sxthne	r3, r3
 8002688:	e7cf      	b.n	800262a <_printf_i+0x52>
 800268a:	6813      	ldr	r3, [r2, #0]
 800268c:	6825      	ldr	r5, [r4, #0]
 800268e:	1d18      	adds	r0, r3, #4
 8002690:	6010      	str	r0, [r2, #0]
 8002692:	0628      	lsls	r0, r5, #24
 8002694:	d501      	bpl.n	800269a <_printf_i+0xc2>
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	e002      	b.n	80026a0 <_printf_i+0xc8>
 800269a:	0668      	lsls	r0, r5, #25
 800269c:	d5fb      	bpl.n	8002696 <_printf_i+0xbe>
 800269e:	881b      	ldrh	r3, [r3, #0]
 80026a0:	296f      	cmp	r1, #111	; 0x6f
 80026a2:	bf14      	ite	ne
 80026a4:	220a      	movne	r2, #10
 80026a6:	2208      	moveq	r2, #8
 80026a8:	4852      	ldr	r0, [pc, #328]	; (80027f4 <_printf_i+0x21c>)
 80026aa:	2100      	movs	r1, #0
 80026ac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80026b0:	6865      	ldr	r5, [r4, #4]
 80026b2:	2d00      	cmp	r5, #0
 80026b4:	60a5      	str	r5, [r4, #8]
 80026b6:	f2c0 8095 	blt.w	80027e4 <_printf_i+0x20c>
 80026ba:	6821      	ldr	r1, [r4, #0]
 80026bc:	f021 0104 	bic.w	r1, r1, #4
 80026c0:	6021      	str	r1, [r4, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d13d      	bne.n	8002742 <_printf_i+0x16a>
 80026c6:	2d00      	cmp	r5, #0
 80026c8:	f040 808e 	bne.w	80027e8 <_printf_i+0x210>
 80026cc:	4665      	mov	r5, ip
 80026ce:	2a08      	cmp	r2, #8
 80026d0:	d10b      	bne.n	80026ea <_printf_i+0x112>
 80026d2:	6823      	ldr	r3, [r4, #0]
 80026d4:	07db      	lsls	r3, r3, #31
 80026d6:	d508      	bpl.n	80026ea <_printf_i+0x112>
 80026d8:	6923      	ldr	r3, [r4, #16]
 80026da:	6862      	ldr	r2, [r4, #4]
 80026dc:	429a      	cmp	r2, r3
 80026de:	bfde      	ittt	le
 80026e0:	2330      	movle	r3, #48	; 0x30
 80026e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80026e6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80026ea:	ebac 0305 	sub.w	r3, ip, r5
 80026ee:	6123      	str	r3, [r4, #16]
 80026f0:	f8cd 8000 	str.w	r8, [sp]
 80026f4:	463b      	mov	r3, r7
 80026f6:	aa03      	add	r2, sp, #12
 80026f8:	4621      	mov	r1, r4
 80026fa:	4630      	mov	r0, r6
 80026fc:	f7ff fef6 	bl	80024ec <_printf_common>
 8002700:	3001      	adds	r0, #1
 8002702:	d14d      	bne.n	80027a0 <_printf_i+0x1c8>
 8002704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002708:	b005      	add	sp, #20
 800270a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800270e:	4839      	ldr	r0, [pc, #228]	; (80027f4 <_printf_i+0x21c>)
 8002710:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002714:	6813      	ldr	r3, [r2, #0]
 8002716:	6821      	ldr	r1, [r4, #0]
 8002718:	1d1d      	adds	r5, r3, #4
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6015      	str	r5, [r2, #0]
 800271e:	060a      	lsls	r2, r1, #24
 8002720:	d50b      	bpl.n	800273a <_printf_i+0x162>
 8002722:	07ca      	lsls	r2, r1, #31
 8002724:	bf44      	itt	mi
 8002726:	f041 0120 	orrmi.w	r1, r1, #32
 800272a:	6021      	strmi	r1, [r4, #0]
 800272c:	b91b      	cbnz	r3, 8002736 <_printf_i+0x15e>
 800272e:	6822      	ldr	r2, [r4, #0]
 8002730:	f022 0220 	bic.w	r2, r2, #32
 8002734:	6022      	str	r2, [r4, #0]
 8002736:	2210      	movs	r2, #16
 8002738:	e7b7      	b.n	80026aa <_printf_i+0xd2>
 800273a:	064d      	lsls	r5, r1, #25
 800273c:	bf48      	it	mi
 800273e:	b29b      	uxthmi	r3, r3
 8002740:	e7ef      	b.n	8002722 <_printf_i+0x14a>
 8002742:	4665      	mov	r5, ip
 8002744:	fbb3 f1f2 	udiv	r1, r3, r2
 8002748:	fb02 3311 	mls	r3, r2, r1, r3
 800274c:	5cc3      	ldrb	r3, [r0, r3]
 800274e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002752:	460b      	mov	r3, r1
 8002754:	2900      	cmp	r1, #0
 8002756:	d1f5      	bne.n	8002744 <_printf_i+0x16c>
 8002758:	e7b9      	b.n	80026ce <_printf_i+0xf6>
 800275a:	6813      	ldr	r3, [r2, #0]
 800275c:	6825      	ldr	r5, [r4, #0]
 800275e:	1d18      	adds	r0, r3, #4
 8002760:	6961      	ldr	r1, [r4, #20]
 8002762:	6010      	str	r0, [r2, #0]
 8002764:	0628      	lsls	r0, r5, #24
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	d501      	bpl.n	800276e <_printf_i+0x196>
 800276a:	6019      	str	r1, [r3, #0]
 800276c:	e002      	b.n	8002774 <_printf_i+0x19c>
 800276e:	066a      	lsls	r2, r5, #25
 8002770:	d5fb      	bpl.n	800276a <_printf_i+0x192>
 8002772:	8019      	strh	r1, [r3, #0]
 8002774:	2300      	movs	r3, #0
 8002776:	4665      	mov	r5, ip
 8002778:	6123      	str	r3, [r4, #16]
 800277a:	e7b9      	b.n	80026f0 <_printf_i+0x118>
 800277c:	6813      	ldr	r3, [r2, #0]
 800277e:	1d19      	adds	r1, r3, #4
 8002780:	6011      	str	r1, [r2, #0]
 8002782:	681d      	ldr	r5, [r3, #0]
 8002784:	6862      	ldr	r2, [r4, #4]
 8002786:	2100      	movs	r1, #0
 8002788:	4628      	mov	r0, r5
 800278a:	f000 f837 	bl	80027fc <memchr>
 800278e:	b108      	cbz	r0, 8002794 <_printf_i+0x1bc>
 8002790:	1b40      	subs	r0, r0, r5
 8002792:	6060      	str	r0, [r4, #4]
 8002794:	6863      	ldr	r3, [r4, #4]
 8002796:	6123      	str	r3, [r4, #16]
 8002798:	2300      	movs	r3, #0
 800279a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800279e:	e7a7      	b.n	80026f0 <_printf_i+0x118>
 80027a0:	6923      	ldr	r3, [r4, #16]
 80027a2:	462a      	mov	r2, r5
 80027a4:	4639      	mov	r1, r7
 80027a6:	4630      	mov	r0, r6
 80027a8:	47c0      	blx	r8
 80027aa:	3001      	adds	r0, #1
 80027ac:	d0aa      	beq.n	8002704 <_printf_i+0x12c>
 80027ae:	6823      	ldr	r3, [r4, #0]
 80027b0:	079b      	lsls	r3, r3, #30
 80027b2:	d413      	bmi.n	80027dc <_printf_i+0x204>
 80027b4:	68e0      	ldr	r0, [r4, #12]
 80027b6:	9b03      	ldr	r3, [sp, #12]
 80027b8:	4298      	cmp	r0, r3
 80027ba:	bfb8      	it	lt
 80027bc:	4618      	movlt	r0, r3
 80027be:	e7a3      	b.n	8002708 <_printf_i+0x130>
 80027c0:	2301      	movs	r3, #1
 80027c2:	464a      	mov	r2, r9
 80027c4:	4639      	mov	r1, r7
 80027c6:	4630      	mov	r0, r6
 80027c8:	47c0      	blx	r8
 80027ca:	3001      	adds	r0, #1
 80027cc:	d09a      	beq.n	8002704 <_printf_i+0x12c>
 80027ce:	3501      	adds	r5, #1
 80027d0:	68e3      	ldr	r3, [r4, #12]
 80027d2:	9a03      	ldr	r2, [sp, #12]
 80027d4:	1a9b      	subs	r3, r3, r2
 80027d6:	42ab      	cmp	r3, r5
 80027d8:	dcf2      	bgt.n	80027c0 <_printf_i+0x1e8>
 80027da:	e7eb      	b.n	80027b4 <_printf_i+0x1dc>
 80027dc:	2500      	movs	r5, #0
 80027de:	f104 0919 	add.w	r9, r4, #25
 80027e2:	e7f5      	b.n	80027d0 <_printf_i+0x1f8>
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1ac      	bne.n	8002742 <_printf_i+0x16a>
 80027e8:	7803      	ldrb	r3, [r0, #0]
 80027ea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80027ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80027f2:	e76c      	b.n	80026ce <_printf_i+0xf6>
 80027f4:	0800291d 	.word	0x0800291d
 80027f8:	0800292e 	.word	0x0800292e

080027fc <memchr>:
 80027fc:	b510      	push	{r4, lr}
 80027fe:	b2c9      	uxtb	r1, r1
 8002800:	4402      	add	r2, r0
 8002802:	4290      	cmp	r0, r2
 8002804:	4603      	mov	r3, r0
 8002806:	d101      	bne.n	800280c <memchr+0x10>
 8002808:	2300      	movs	r3, #0
 800280a:	e003      	b.n	8002814 <memchr+0x18>
 800280c:	781c      	ldrb	r4, [r3, #0]
 800280e:	3001      	adds	r0, #1
 8002810:	428c      	cmp	r4, r1
 8002812:	d1f6      	bne.n	8002802 <memchr+0x6>
 8002814:	4618      	mov	r0, r3
 8002816:	bd10      	pop	{r4, pc}

08002818 <memmove>:
 8002818:	4288      	cmp	r0, r1
 800281a:	b510      	push	{r4, lr}
 800281c:	eb01 0302 	add.w	r3, r1, r2
 8002820:	d807      	bhi.n	8002832 <memmove+0x1a>
 8002822:	1e42      	subs	r2, r0, #1
 8002824:	4299      	cmp	r1, r3
 8002826:	d00a      	beq.n	800283e <memmove+0x26>
 8002828:	f811 4b01 	ldrb.w	r4, [r1], #1
 800282c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002830:	e7f8      	b.n	8002824 <memmove+0xc>
 8002832:	4283      	cmp	r3, r0
 8002834:	d9f5      	bls.n	8002822 <memmove+0xa>
 8002836:	1881      	adds	r1, r0, r2
 8002838:	1ad2      	subs	r2, r2, r3
 800283a:	42d3      	cmn	r3, r2
 800283c:	d100      	bne.n	8002840 <memmove+0x28>
 800283e:	bd10      	pop	{r4, pc}
 8002840:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002844:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002848:	e7f7      	b.n	800283a <memmove+0x22>

0800284a <_realloc_r>:
 800284a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800284c:	4607      	mov	r7, r0
 800284e:	4614      	mov	r4, r2
 8002850:	460e      	mov	r6, r1
 8002852:	b921      	cbnz	r1, 800285e <_realloc_r+0x14>
 8002854:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002858:	4611      	mov	r1, r2
 800285a:	f7ff bc69 	b.w	8002130 <_malloc_r>
 800285e:	b922      	cbnz	r2, 800286a <_realloc_r+0x20>
 8002860:	f7ff fc1a 	bl	8002098 <_free_r>
 8002864:	4625      	mov	r5, r4
 8002866:	4628      	mov	r0, r5
 8002868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800286a:	f000 f814 	bl	8002896 <_malloc_usable_size_r>
 800286e:	42a0      	cmp	r0, r4
 8002870:	d20f      	bcs.n	8002892 <_realloc_r+0x48>
 8002872:	4621      	mov	r1, r4
 8002874:	4638      	mov	r0, r7
 8002876:	f7ff fc5b 	bl	8002130 <_malloc_r>
 800287a:	4605      	mov	r5, r0
 800287c:	2800      	cmp	r0, #0
 800287e:	d0f2      	beq.n	8002866 <_realloc_r+0x1c>
 8002880:	4631      	mov	r1, r6
 8002882:	4622      	mov	r2, r4
 8002884:	f7ff fbf4 	bl	8002070 <memcpy>
 8002888:	4631      	mov	r1, r6
 800288a:	4638      	mov	r0, r7
 800288c:	f7ff fc04 	bl	8002098 <_free_r>
 8002890:	e7e9      	b.n	8002866 <_realloc_r+0x1c>
 8002892:	4635      	mov	r5, r6
 8002894:	e7e7      	b.n	8002866 <_realloc_r+0x1c>

08002896 <_malloc_usable_size_r>:
 8002896:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800289a:	1f18      	subs	r0, r3, #4
 800289c:	2b00      	cmp	r3, #0
 800289e:	bfbc      	itt	lt
 80028a0:	580b      	ldrlt	r3, [r1, r0]
 80028a2:	18c0      	addlt	r0, r0, r3
 80028a4:	4770      	bx	lr
	...

080028a8 <_init>:
 80028a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028aa:	bf00      	nop
 80028ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ae:	bc08      	pop	{r3}
 80028b0:	469e      	mov	lr, r3
 80028b2:	4770      	bx	lr

080028b4 <_fini>:
 80028b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028b6:	bf00      	nop
 80028b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ba:	bc08      	pop	{r3}
 80028bc:	469e      	mov	lr, r3
 80028be:	4770      	bx	lr
